package tasks

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

func (n _Any) AsInterface() _Any__iface {
	return n.x
}
type _Any__Maybe struct {
	m schema.Maybe
	v Any
}
type MaybeAny = *_Any__Maybe

func (m MaybeAny) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeAny) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeAny) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeAny) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeAny) Must() Any {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	memberName__Any_Bool = _String{"Bool"}
	memberName__Any_Int = _String{"Int"}
	memberName__Any_Float = _String{"Float"}
	memberName__Any_String = _String{"String"}
	memberName__Any_Bytes = _String{"Bytes"}
	memberName__Any_Map = _String{"Map"}
	memberName__Any_List = _String{"List"}
	memberName__Any_Link = _String{"Link"}
)
var _ ipld.Node = (Any)(&_Any{})
var _ schema.TypedNode = (Any)(&_Any{})
func (Any) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n Any) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Bool":
		if n2, ok := n.x.(Bool); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
	case "Int":
		if n2, ok := n.x.(Int); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
	case "Float":
		if n2, ok := n.x.(Float); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
	case "String":
		if n2, ok := n.x.(String); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
	case "Bytes":
		if n2, ok := n.x.(Bytes); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
	case "Map":
		if n2, ok := n.x.(Map); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
	case "List":
		if n2, ok := n.x.(List); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
	case "Link":
		if n2, ok := n.x.(Link); ok {
			return n2, nil
		} else {
			return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n Any) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (Any) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{"tasks.Any"}.LookupByIndex(0)
}
func (n Any) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Any) MapIterator() ipld.MapIterator {
	return &_Any__MapItr{n, false}
}

type _Any__MapItr struct {
	n Any
	done bool
}

func (itr *_Any__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.done {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch n2 := itr.n.x.(type) {
	case Bool:
		k, v = &memberName__Any_Bool, n2
	case Int:
		k, v = &memberName__Any_Int, n2
	case Float:
		k, v = &memberName__Any_Float, n2
	case String:
		k, v = &memberName__Any_String, n2
	case Bytes:
		k, v = &memberName__Any_Bytes, n2
	case Map:
		k, v = &memberName__Any_Map, n2
	case List:
		k, v = &memberName__Any_List, n2
	case Link:
		k, v = &memberName__Any_Link, n2
	default:
		panic("unreachable")
	}
	itr.done = true
	return
}
func (itr *_Any__MapItr) Done() bool {
	return itr.done
}

func (Any) ListIterator() ipld.ListIterator {
	return nil
}
func (Any) Length() int64 {
	return 1
}
func (Any) IsAbsent() bool {
	return false
}
func (Any) IsNull() bool {
	return false
}
func (Any) AsBool() (bool, error) {
	return mixins.Map{"tasks.Any"}.AsBool()
}
func (Any) AsInt() (int64, error) {
	return mixins.Map{"tasks.Any"}.AsInt()
}
func (Any) AsFloat() (float64, error) {
	return mixins.Map{"tasks.Any"}.AsFloat()
}
func (Any) AsString() (string, error) {
	return mixins.Map{"tasks.Any"}.AsString()
}
func (Any) AsBytes() ([]byte, error) {
	return mixins.Map{"tasks.Any"}.AsBytes()
}
func (Any) AsLink() (ipld.Link, error) {
	return mixins.Map{"tasks.Any"}.AsLink()
}
func (Any) Prototype() ipld.NodePrototype {
	return _Any__Prototype{}
}
type _Any__Prototype struct{}

func (_Any__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Any__Builder
	nb.Reset()
	return &nb
}
type _Any__Builder struct {
	_Any__Assembler
}
func (nb *_Any__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Any__Builder) Reset() {
	var w _Any
	var m schema.Maybe
	*nb = _Any__Builder{_Any__Assembler{w: &w, m: &m}}
}
type _Any__Assembler struct {
	w *_Any
	m *schema.Maybe
	state maState

	cm schema.Maybe
	ca1 *_Bool__Assembler
	
	ca2 *_Int__Assembler
	
	ca3 *_Float__Assembler
	
	ca4 *_String__Assembler
	
	ca5 *_Bytes__Assembler
	
	ca6 *_Map__Assembler
	
	ca7 *_List__Assembler
	
	ca8 *_Link__Assembler
	ca uint
}
func (na *_Any__Assembler) reset() {
	na.state = maState_initial
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()
	
	case 2:
		na.ca2.reset()
	
	case 3:
		na.ca3.reset()
	
	case 4:
		na.ca4.reset()
	
	case 5:
		na.ca5.reset()
	
	case 6:
		na.ca6.reset()
	
	case 7:
		na.ca7.reset()
	
	case 8:
		na.ca8.reset()
	default:
		panic("unreachable")
	}
	na.ca = 0
	na.cm = schema.Maybe_Absent
}
func (na *_Any__Assembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Any{}
	}
	return na, nil
}
func (_Any__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"tasks.Any"}.BeginList(0)
}
func (na *_Any__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"tasks.Any"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Any__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"tasks.Any"}.AssignBool(false)
}
func (_Any__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{"tasks.Any"}.AssignInt(0)
}
func (_Any__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"tasks.Any"}.AssignFloat(0)
}
func (_Any__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"tasks.Any"}.AssignString("")
}
func (_Any__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"tasks.Any"}.AssignBytes(nil)
}
func (_Any__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"tasks.Any"}.AssignLink(nil)
}
func (na *_Any__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Any); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "tasks.Any", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Any__Assembler) Prototype() ipld.NodePrototype {
	return _Any__Prototype{}
}
func (ma *_Any__Assembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:ma.state = maState_initial
		return true
	default:
		return false
	}
}
func (ma *_Any__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly.
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	if ma.ca != 0 {
		return nil, schema.ErrNotUnionStructure{TypeName:"tasks.Any", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "Bool":
		ma.state = maState_midValue
		ma.ca = 1
		x := &_Bool{}
		ma.w.x = x
		if ma.ca1 == nil {
			ma.ca1 = &_Bool__Assembler{}
		}
		ma.ca1.w = x
		ma.ca1.m = &ma.cm
		return ma.ca1, nil
	case "Int":
		ma.state = maState_midValue
		ma.ca = 2
		x := &_Int{}
		ma.w.x = x
		if ma.ca2 == nil {
			ma.ca2 = &_Int__Assembler{}
		}
		ma.ca2.w = x
		ma.ca2.m = &ma.cm
		return ma.ca2, nil
	case "Float":
		ma.state = maState_midValue
		ma.ca = 3
		x := &_Float{}
		ma.w.x = x
		if ma.ca3 == nil {
			ma.ca3 = &_Float__Assembler{}
		}
		ma.ca3.w = x
		ma.ca3.m = &ma.cm
		return ma.ca3, nil
	case "String":
		ma.state = maState_midValue
		ma.ca = 4
		x := &_String{}
		ma.w.x = x
		if ma.ca4 == nil {
			ma.ca4 = &_String__Assembler{}
		}
		ma.ca4.w = x
		ma.ca4.m = &ma.cm
		return ma.ca4, nil
	case "Bytes":
		ma.state = maState_midValue
		ma.ca = 5
		x := &_Bytes{}
		ma.w.x = x
		if ma.ca5 == nil {
			ma.ca5 = &_Bytes__Assembler{}
		}
		ma.ca5.w = x
		ma.ca5.m = &ma.cm
		return ma.ca5, nil
	case "Map":
		ma.state = maState_midValue
		ma.ca = 6
		x := &_Map{}
		ma.w.x = x
		if ma.ca6 == nil {
			ma.ca6 = &_Map__Assembler{}
		}
		ma.ca6.w = x
		ma.ca6.m = &ma.cm
		return ma.ca6, nil
	case "List":
		ma.state = maState_midValue
		ma.ca = 7
		x := &_List{}
		ma.w.x = x
		if ma.ca7 == nil {
			ma.ca7 = &_List__Assembler{}
		}
		ma.ca7.w = x
		ma.ca7.m = &ma.cm
		return ma.ca7, nil
	case "Link":
		ma.state = maState_midValue
		ma.ca = 8
		x := &_Link{}
		ma.w.x = x
		if ma.ca8 == nil {
			ma.ca8 = &_Link__Assembler{}
		}
		ma.ca8.w = x
		ma.ca8.m = &ma.cm
		return ma.ca8, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"tasks.Any", Key:&_String{k}}
	}
}
func (ma *_Any__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly... or rather, the keyassembler will be.
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Any__KeyAssembler)(ma)
}
func (ma *_Any__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.ca {
	case 0:
		x := &_Bool{}
		ma.w.x = x
		if ma.ca1 == nil {
			ma.ca1 = &_Bool__Assembler{}
		}
		ma.ca1.w = x
		ma.ca1.m = &ma.cm
		return ma.ca1
	case 1:
		x := &_Int{}
		ma.w.x = x
		if ma.ca2 == nil {
			ma.ca2 = &_Int__Assembler{}
		}
		ma.ca2.w = x
		ma.ca2.m = &ma.cm
		return ma.ca2
	case 2:
		x := &_Float{}
		ma.w.x = x
		if ma.ca3 == nil {
			ma.ca3 = &_Float__Assembler{}
		}
		ma.ca3.w = x
		ma.ca3.m = &ma.cm
		return ma.ca3
	case 3:
		x := &_String{}
		ma.w.x = x
		if ma.ca4 == nil {
			ma.ca4 = &_String__Assembler{}
		}
		ma.ca4.w = x
		ma.ca4.m = &ma.cm
		return ma.ca4
	case 4:
		x := &_Bytes{}
		ma.w.x = x
		if ma.ca5 == nil {
			ma.ca5 = &_Bytes__Assembler{}
		}
		ma.ca5.w = x
		ma.ca5.m = &ma.cm
		return ma.ca5
	case 5:
		x := &_Map{}
		ma.w.x = x
		if ma.ca6 == nil {
			ma.ca6 = &_Map__Assembler{}
		}
		ma.ca6.w = x
		ma.ca6.m = &ma.cm
		return ma.ca6
	case 6:
		x := &_List{}
		ma.w.x = x
		if ma.ca7 == nil {
			ma.ca7 = &_List__Assembler{}
		}
		ma.ca7.w = x
		ma.ca7.m = &ma.cm
		return ma.ca7
	case 7:
		x := &_Link{}
		ma.w.x = x
		if ma.ca8 == nil {
			ma.ca8 = &_Link__Assembler{}
		}
		ma.ca8.w = x
		ma.ca8.m = &ma.cm
		return ma.ca8
	default:
		panic("unreachable")
	}
}
func (ma *_Any__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.ca == 0 {
		return schema.ErrNotUnionStructure{TypeName:"tasks.Any", Detail: "a union must have exactly one entry (not none)!"}
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Any__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Any__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	switch k {
	case "Bool":
		return _Bool__Prototype{}
	case "Int":
		return _Int__Prototype{}
	case "Float":
		return _Float__Prototype{}
	case "String":
		return _String__Prototype{}
	case "Bytes":
		return _Bytes__Prototype{}
	case "Map":
		return _Map__Prototype{}
	case "List":
		return _List__Prototype{}
	case "Link":
		return _Link__Prototype{}
	default:
		return nil
	}
}
type _Any__KeyAssembler _Any__Assembler
func (_Any__KeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"tasks.Any.KeyAssembler"}.BeginMap(0)
}
func (_Any__KeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"tasks.Any.KeyAssembler"}.BeginList(0)
}
func (na *_Any__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"tasks.Any.KeyAssembler"}.AssignNull()
}
func (_Any__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"tasks.Any.KeyAssembler"}.AssignBool(false)
}
func (_Any__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{"tasks.Any.KeyAssembler"}.AssignInt(0)
}
func (_Any__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"tasks.Any.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Any__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	if ka.ca != 0 {
		return schema.ErrNotUnionStructure{TypeName:"tasks.Any", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "Bool":
		ka.ca = 1
		ka.state = maState_expectValue
		return nil
	case "Int":
		ka.ca = 2
		ka.state = maState_expectValue
		return nil
	case "Float":
		ka.ca = 3
		ka.state = maState_expectValue
		return nil
	case "String":
		ka.ca = 4
		ka.state = maState_expectValue
		return nil
	case "Bytes":
		ka.ca = 5
		ka.state = maState_expectValue
		return nil
	case "Map":
		ka.ca = 6
		ka.state = maState_expectValue
		return nil
	case "List":
		ka.ca = 7
		ka.state = maState_expectValue
		return nil
	case "Link":
		ka.ca = 8
		ka.state = maState_expectValue
		return nil
	default:
		return ipld.ErrInvalidKey{TypeName:"tasks.Any", Key:&_String{k}} // TODO: error quality: ErrInvalidUnionDiscriminant ?
	}
	return nil
}
func (_Any__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"tasks.Any.KeyAssembler"}.AssignBytes(nil)
}
func (_Any__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"tasks.Any.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Any__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Any__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (Any) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Any) Representation() ipld.Node {
	return (*_Any__Repr)(n)
}
type _Any__Repr _Any
var _ ipld.Node = &_Any__Repr{}
func (n *_Any__Repr) Kind() ipld.Kind {
	switch n.x.(type) {
	case Bool:
		return ipld.Kind_Bool
	case Int:
		return ipld.Kind_Int
	case Float:
		return ipld.Kind_Float
	case String:
		return ipld.Kind_String
	case Bytes:
		return ipld.Kind_Bytes
	case Map:
		return ipld.Kind_Map
	case List:
		return ipld.Kind_List
	case Link:
		return ipld.Kind_Link
	default:
		panic("unreachable")
	}
}
func (n *_Any__Repr) LookupByString(key string) (ipld.Node, error) {
	switch n2 := n.x.(type) {
	case Map:
		return n2.Representation().LookupByString(key)
	default:
		return nil, ipld.ErrWrongKind{TypeName: "tasks.Any.Repr", MethodName: "LookupByString", AppropriateKind: ipld.KindSet_JustMap, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	switch n2 := n.x.(type) {
	case Map:
		return n2.Representation().LookupByNode(key)
	case List:
		return n2.Representation().LookupByNode(key)
	default:
		return nil, ipld.ErrWrongKind{TypeName: "tasks.Any.Repr", MethodName: "LookupByNode", AppropriateKind: ipld.KindSet_Recursive, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	switch n2 := n.x.(type) {
	case List:
		return n2.Representation().LookupByIndex(idx)
	default:
		return nil, ipld.ErrWrongKind{TypeName: "tasks.Any.Repr", MethodName: "LookupByIndex", AppropriateKind: ipld.KindSet_JustList, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	switch n2 := n.x.(type) {
	case Map:
		return n2.Representation().LookupBySegment(seg)
	case List:
		return n2.Representation().LookupBySegment(seg)
	default:
		return nil, ipld.ErrWrongKind{TypeName: "tasks.Any.Repr", MethodName: "LookupBySegment", AppropriateKind: ipld.KindSet_Recursive, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) MapIterator() ipld.MapIterator {
	switch n2 := n.x.(type) {
	case Map:
		return n2.Representation().MapIterator()
	default:
		return nil
	}
}
func (n *_Any__Repr) ListIterator() ipld.ListIterator {
	switch n2 := n.x.(type) {
	case List:
		return n2.Representation().ListIterator()
	default:
		return nil
	}
}
func (n *_Any__Repr) Length() int64 {
	switch n2 := n.x.(type) {
	case Map:
		return n2.Representation().Length()
	case List:
		return n2.Representation().Length()
	default:
		return -1
	}
}
func (n *_Any__Repr) IsAbsent() bool {
	return false
}
func (n *_Any__Repr) IsNull() bool {
	return false
}
func (n *_Any__Repr) AsBool() (bool, error) {
	switch n2 := n.x.(type) {
	case Bool:
		return n2.Representation().AsBool()
	default:
		return false, ipld.ErrWrongKind{TypeName: "tasks.Any.Repr", MethodName: "AsBool", AppropriateKind: ipld.KindSet_JustBool, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) AsInt() (int64, error) {
	switch n2 := n.x.(type) {
	case Int:
		return n2.Representation().AsInt()
	default:
		return 0, ipld.ErrWrongKind{TypeName: "tasks.Any.Repr", MethodName: "AsInt", AppropriateKind: ipld.KindSet_JustInt, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) AsFloat() (float64, error) {
	switch n2 := n.x.(type) {
	case Float:
		return n2.Representation().AsFloat()
	default:
		return 0, ipld.ErrWrongKind{TypeName: "tasks.Any.Repr", MethodName: "AsFloat", AppropriateKind: ipld.KindSet_JustFloat, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) AsString() (string, error) {
	switch n2 := n.x.(type) {
	case String:
		return n2.Representation().AsString()
	default:
		return "", ipld.ErrWrongKind{TypeName: "tasks.Any.Repr", MethodName: "AsString", AppropriateKind: ipld.KindSet_JustString, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) AsBytes() ([]byte, error) {
	switch n2 := n.x.(type) {
	case Bytes:
		return n2.Representation().AsBytes()
	default:
		return nil, ipld.ErrWrongKind{TypeName: "tasks.Any.Repr", MethodName: "AsBytes", AppropriateKind: ipld.KindSet_JustBytes, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) AsLink() (ipld.Link, error) {
	switch n2 := n.x.(type) {
	case Link:
		return n2.Representation().AsLink()
	default:
		return nil, ipld.ErrWrongKind{TypeName: "tasks.Any.Repr", MethodName: "AsLink", AppropriateKind: ipld.KindSet_JustLink, ActualKind: n.Kind()}
	}
}
func (_Any__Repr) Prototype() ipld.NodePrototype {
	return _Any__ReprPrototype{}
}
type _Any__ReprPrototype struct{}

func (_Any__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _Any__ReprBuilder
	nb.Reset()
	return &nb
}
type _Any__ReprBuilder struct {
	_Any__ReprAssembler
}
func (nb *_Any__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Any__ReprBuilder) Reset() {
	var w _Any
	var m schema.Maybe
	*nb = _Any__ReprBuilder{_Any__ReprAssembler{w: &w, m: &m}}
}
type _Any__ReprAssembler struct {
	w *_Any
	m *schema.Maybe
	ca1 *_Bool__ReprAssembler
	ca2 *_Int__ReprAssembler
	ca3 *_Float__ReprAssembler
	ca4 *_String__ReprAssembler
	ca5 *_Bytes__ReprAssembler
	ca6 *_Map__ReprAssembler
	ca7 *_List__ReprAssembler
	ca8 *_Link__ReprAssembler
	ca uint
}
func (na *_Any__ReprAssembler) reset() {
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()
	case 2:
		na.ca2.reset()
	case 3:
		na.ca3.reset()
	case 4:
		na.ca4.reset()
	case 5:
		na.ca5.reset()
	case 6:
		na.ca6.reset()
	case 7:
		na.ca7.reset()
	case 8:
		na.ca8.reset()
	default:
		panic("unreachable")
	}
	na.ca = 0
}
func (na *_Any__ReprAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Any{}
	}
	na.ca = 6
	x := &_Map{}
	na.w.x = x
	if na.ca6 == nil {
		na.ca6 = &_Map__ReprAssembler{}
	}
	na.ca6.w = x
	na.ca6.m = na.m
	return na.ca6.BeginMap(sizeHint)
	return nil, schema.ErrNotUnionStructure{TypeName: "tasks.Any.Repr", Detail: "BeginMap called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_Any__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Any{}
	}
	na.ca = 7
	x := &_List{}
	na.w.x = x
	if na.ca7 == nil {
		na.ca7 = &_List__ReprAssembler{}
	}
	na.ca7.w = x
	na.ca7.m = na.m
	return na.ca7.BeginList(sizeHint)
	return nil, schema.ErrNotUnionStructure{TypeName: "tasks.Any.Repr", Detail: "BeginList called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_Any__ReprAssembler) AssignNull() error  {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	return  schema.ErrNotUnionStructure{TypeName: "tasks.Any.Repr", Detail: "AssignNull called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_Any__ReprAssembler) AssignBool(v bool) error  {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Any{}
	}
	na.ca = 1
	x := &_Bool{}
	na.w.x = x
	if na.ca1 == nil {
		na.ca1 = &_Bool__ReprAssembler{}
	}
	na.ca1.w = x
	na.ca1.m = na.m
	return na.ca1.AssignBool(v)
	return  schema.ErrNotUnionStructure{TypeName: "tasks.Any.Repr", Detail: "AssignBool called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_Any__ReprAssembler) AssignInt(v int64) error  {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Any{}
	}
	na.ca = 2
	x := &_Int{}
	na.w.x = x
	if na.ca2 == nil {
		na.ca2 = &_Int__ReprAssembler{}
	}
	na.ca2.w = x
	na.ca2.m = na.m
	return na.ca2.AssignInt(v)
	return  schema.ErrNotUnionStructure{TypeName: "tasks.Any.Repr", Detail: "AssignInt called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_Any__ReprAssembler) AssignFloat(v float64) error  {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Any{}
	}
	na.ca = 3
	x := &_Float{}
	na.w.x = x
	if na.ca3 == nil {
		na.ca3 = &_Float__ReprAssembler{}
	}
	na.ca3.w = x
	na.ca3.m = na.m
	return na.ca3.AssignFloat(v)
	return  schema.ErrNotUnionStructure{TypeName: "tasks.Any.Repr", Detail: "AssignFloat called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_Any__ReprAssembler) AssignString(v string) error  {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Any{}
	}
	na.ca = 4
	x := &_String{}
	na.w.x = x
	if na.ca4 == nil {
		na.ca4 = &_String__ReprAssembler{}
	}
	na.ca4.w = x
	na.ca4.m = na.m
	return na.ca4.AssignString(v)
	return  schema.ErrNotUnionStructure{TypeName: "tasks.Any.Repr", Detail: "AssignString called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_Any__ReprAssembler) AssignBytes(v []byte) error  {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Any{}
	}
	na.ca = 5
	x := &_Bytes{}
	na.w.x = x
	if na.ca5 == nil {
		na.ca5 = &_Bytes__ReprAssembler{}
	}
	na.ca5.w = x
	na.ca5.m = na.m
	return na.ca5.AssignBytes(v)
	return  schema.ErrNotUnionStructure{TypeName: "tasks.Any.Repr", Detail: "AssignBytes called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_Any__ReprAssembler) AssignLink(v ipld.Link) error  {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Any{}
	}
	na.ca = 8
	x := &_Link{}
	na.w.x = x
	if na.ca8 == nil {
		na.ca8 = &_Link__ReprAssembler{}
	}
	na.ca8.w = x
	na.ca8.m = na.m
	return na.ca8.AssignLink(v)
	return  schema.ErrNotUnionStructure{TypeName: "tasks.Any.Repr", Detail: "AssignLink called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_Any__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Any); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	switch v.Kind() {
	case ipld.Kind_Bool:
		v2, _ := v.AsBool()
		return na.AssignBool(v2)
	case ipld.Kind_Int:
		v2, _ := v.AsInt()
		return na.AssignInt(v2)
	case ipld.Kind_Float:
		v2, _ := v.AsFloat()
		return na.AssignFloat(v2)
	case ipld.Kind_String:
		v2, _ := v.AsString()
		return na.AssignString(v2)
	case ipld.Kind_Bytes:
		v2, _ := v.AsBytes()
		return na.AssignBytes(v2)
	case ipld.Kind_Map:
		na, err := na.BeginMap(v.Length())
		if err != nil {
			return err
		}
		itr := v.MapIterator()
		for !itr.Done() {
			k, v, err := itr.Next()
			if err != nil {
				return err
			}
			if err := na.AssembleKey().AssignNode(k); err != nil {
				return err
			}
			if err := na.AssembleValue().AssignNode(v); err != nil {
				return err
			}
		}
		return na.Finish()
	case ipld.Kind_List:
		na, err := na.BeginList(v.Length())
		if err != nil {
			return err
		}
		itr := v.ListIterator()
		for !itr.Done() {
			_, v, err := itr.Next()
			if err != nil {
				return err
			}
			if err := na.AssembleValue().AssignNode(v); err != nil {
				return err
			}
		}
		return na.Finish()
	case ipld.Kind_Link:
		v2, _ := v.AsLink()
		return na.AssignLink(v2)
	default:
		panic("unreachable")
	}
}
func (na *_Any__ReprAssembler) Prototype() ipld.NodePrototype {
	return _Any__ReprPrototype{}
}

func (n Bool) Bool() bool {
	return n.x
}
func (_Bool__Prototype) FromBool(v bool) (Bool, error) {
	n := _Bool{v}
	return &n, nil
}
type _Bool__Maybe struct {
	m schema.Maybe
	v Bool
}
type MaybeBool = *_Bool__Maybe

func (m MaybeBool) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeBool) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeBool) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeBool) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeBool) Must() Bool {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (Bool)(&_Bool{})
var _ schema.TypedNode = (Bool)(&_Bool{})
func (Bool) Kind() ipld.Kind {
	return ipld.Kind_Bool
}
func (Bool) LookupByString(string) (ipld.Node, error) {
	return mixins.Bool{"tasks.Bool"}.LookupByString("")
}
func (Bool) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Bool{"tasks.Bool"}.LookupByNode(nil)
}
func (Bool) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Bool{"tasks.Bool"}.LookupByIndex(0)
}
func (Bool) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Bool{"tasks.Bool"}.LookupBySegment(seg)
}
func (Bool) MapIterator() ipld.MapIterator {
	return nil
}
func (Bool) ListIterator() ipld.ListIterator {
	return nil
}
func (Bool) Length() int64 {
	return -1
}
func (Bool) IsAbsent() bool {
	return false
}
func (Bool) IsNull() bool {
	return false
}
func (n Bool) AsBool() (bool, error) {
	return n.x, nil
}
func (Bool) AsInt() (int64, error) {
	return mixins.Bool{"tasks.Bool"}.AsInt()
}
func (Bool) AsFloat() (float64, error) {
	return mixins.Bool{"tasks.Bool"}.AsFloat()
}
func (Bool) AsString() (string, error) {
	return mixins.Bool{"tasks.Bool"}.AsString()
}
func (Bool) AsBytes() ([]byte, error) {
	return mixins.Bool{"tasks.Bool"}.AsBytes()
}
func (Bool) AsLink() (ipld.Link, error) {
	return mixins.Bool{"tasks.Bool"}.AsLink()
}
func (Bool) Prototype() ipld.NodePrototype {
	return _Bool__Prototype{}
}
type _Bool__Prototype struct{}

func (_Bool__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Bool__Builder
	nb.Reset()
	return &nb
}
type _Bool__Builder struct {
	_Bool__Assembler
}
func (nb *_Bool__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Bool__Builder) Reset() {
	var w _Bool
	var m schema.Maybe
	*nb = _Bool__Builder{_Bool__Assembler{w: &w, m: &m}}
}
type _Bool__Assembler struct {
	w *_Bool
	m *schema.Maybe
}

func (na *_Bool__Assembler) reset() {}
func (_Bool__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.BoolAssembler{"tasks.Bool"}.BeginMap(0)
}
func (_Bool__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.BoolAssembler{"tasks.Bool"}.BeginList(0)
}
func (na *_Bool__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.BoolAssembler{"tasks.Bool"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (na *_Bool__Assembler) AssignBool(v bool) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_Bool{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Bool__Assembler) AssignInt(int64) error {
	return mixins.BoolAssembler{"tasks.Bool"}.AssignInt(0)
}
func (_Bool__Assembler) AssignFloat(float64) error {
	return mixins.BoolAssembler{"tasks.Bool"}.AssignFloat(0)
}
func (_Bool__Assembler) AssignString(string) error {
	return mixins.BoolAssembler{"tasks.Bool"}.AssignString("")
}
func (_Bool__Assembler) AssignBytes([]byte) error {
	return mixins.BoolAssembler{"tasks.Bool"}.AssignBytes(nil)
}
func (_Bool__Assembler) AssignLink(ipld.Link) error {
	return mixins.BoolAssembler{"tasks.Bool"}.AssignLink(nil)
}
func (na *_Bool__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Bool); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsBool(); err != nil {
		return err
	} else {
		return na.AssignBool(v2)
	}
}
func (_Bool__Assembler) Prototype() ipld.NodePrototype {
	return _Bool__Prototype{}
}
func (Bool) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Bool) Representation() ipld.Node {
	return (*_Bool__Repr)(n)
}
type _Bool__Repr = _Bool
var _ ipld.Node = &_Bool__Repr{}
type _Bool__ReprPrototype = _Bool__Prototype
type _Bool__ReprAssembler = _Bool__Assembler

func (n Bytes) Bytes() []byte {
	return n.x
}
func (_Bytes__Prototype) FromBytes(v []byte) (Bytes, error) {
	n := _Bytes{v}
	return &n, nil
}
type _Bytes__Maybe struct {
	m schema.Maybe
	v Bytes
}
type MaybeBytes = *_Bytes__Maybe

func (m MaybeBytes) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeBytes) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeBytes) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeBytes) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeBytes) Must() Bytes {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (Bytes)(&_Bytes{})
var _ schema.TypedNode = (Bytes)(&_Bytes{})
func (Bytes) Kind() ipld.Kind {
	return ipld.Kind_Bytes
}
func (Bytes) LookupByString(string) (ipld.Node, error) {
	return mixins.Bytes{"tasks.Bytes"}.LookupByString("")
}
func (Bytes) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Bytes{"tasks.Bytes"}.LookupByNode(nil)
}
func (Bytes) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Bytes{"tasks.Bytes"}.LookupByIndex(0)
}
func (Bytes) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Bytes{"tasks.Bytes"}.LookupBySegment(seg)
}
func (Bytes) MapIterator() ipld.MapIterator {
	return nil
}
func (Bytes) ListIterator() ipld.ListIterator {
	return nil
}
func (Bytes) Length() int64 {
	return -1
}
func (Bytes) IsAbsent() bool {
	return false
}
func (Bytes) IsNull() bool {
	return false
}
func (Bytes) AsBool() (bool, error) {
	return mixins.Bytes{"tasks.Bytes"}.AsBool()
}
func (Bytes) AsInt() (int64, error) {
	return mixins.Bytes{"tasks.Bytes"}.AsInt()
}
func (Bytes) AsFloat() (float64, error) {
	return mixins.Bytes{"tasks.Bytes"}.AsFloat()
}
func (Bytes) AsString() (string, error) {
	return mixins.Bytes{"tasks.Bytes"}.AsString()
}
func (n Bytes) AsBytes() ([]byte, error) {
	return n.x, nil
}
func (Bytes) AsLink() (ipld.Link, error) {
	return mixins.Bytes{"tasks.Bytes"}.AsLink()
}
func (Bytes) Prototype() ipld.NodePrototype {
	return _Bytes__Prototype{}
}
type _Bytes__Prototype struct{}

func (_Bytes__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Bytes__Builder
	nb.Reset()
	return &nb
}
type _Bytes__Builder struct {
	_Bytes__Assembler
}
func (nb *_Bytes__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Bytes__Builder) Reset() {
	var w _Bytes
	var m schema.Maybe
	*nb = _Bytes__Builder{_Bytes__Assembler{w: &w, m: &m}}
}
type _Bytes__Assembler struct {
	w *_Bytes
	m *schema.Maybe
}

func (na *_Bytes__Assembler) reset() {}
func (_Bytes__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.BytesAssembler{"tasks.Bytes"}.BeginMap(0)
}
func (_Bytes__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.BytesAssembler{"tasks.Bytes"}.BeginList(0)
}
func (na *_Bytes__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.BytesAssembler{"tasks.Bytes"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Bytes__Assembler) AssignBool(bool) error {
	return mixins.BytesAssembler{"tasks.Bytes"}.AssignBool(false)
}
func (_Bytes__Assembler) AssignInt(int64) error {
	return mixins.BytesAssembler{"tasks.Bytes"}.AssignInt(0)
}
func (_Bytes__Assembler) AssignFloat(float64) error {
	return mixins.BytesAssembler{"tasks.Bytes"}.AssignFloat(0)
}
func (_Bytes__Assembler) AssignString(string) error {
	return mixins.BytesAssembler{"tasks.Bytes"}.AssignString("")
}
func (na *_Bytes__Assembler) AssignBytes(v []byte) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_Bytes{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Bytes__Assembler) AssignLink(ipld.Link) error {
	return mixins.BytesAssembler{"tasks.Bytes"}.AssignLink(nil)
}
func (na *_Bytes__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Bytes); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsBytes(); err != nil {
		return err
	} else {
		return na.AssignBytes(v2)
	}
}
func (_Bytes__Assembler) Prototype() ipld.NodePrototype {
	return _Bytes__Prototype{}
}
func (Bytes) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Bytes) Representation() ipld.Node {
	return (*_Bytes__Repr)(n)
}
type _Bytes__Repr = _Bytes
var _ ipld.Node = &_Bytes__Repr{}
type _Bytes__ReprPrototype = _Bytes__Prototype
type _Bytes__ReprAssembler = _Bytes__Assembler

func (n Float) Float() float64 {
	return n.x
}
func (_Float__Prototype) FromFloat(v float64) (Float, error) {
	n := _Float{v}
	return &n, nil
}
type _Float__Maybe struct {
	m schema.Maybe
	v Float
}
type MaybeFloat = *_Float__Maybe

func (m MaybeFloat) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeFloat) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeFloat) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeFloat) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeFloat) Must() Float {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (Float)(&_Float{})
var _ schema.TypedNode = (Float)(&_Float{})
func (Float) Kind() ipld.Kind {
	return ipld.Kind_Float
}
func (Float) LookupByString(string) (ipld.Node, error) {
	return mixins.Float{"tasks.Float"}.LookupByString("")
}
func (Float) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Float{"tasks.Float"}.LookupByNode(nil)
}
func (Float) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Float{"tasks.Float"}.LookupByIndex(0)
}
func (Float) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Float{"tasks.Float"}.LookupBySegment(seg)
}
func (Float) MapIterator() ipld.MapIterator {
	return nil
}
func (Float) ListIterator() ipld.ListIterator {
	return nil
}
func (Float) Length() int64 {
	return -1
}
func (Float) IsAbsent() bool {
	return false
}
func (Float) IsNull() bool {
	return false
}
func (Float) AsBool() (bool, error) {
	return mixins.Float{"tasks.Float"}.AsBool()
}
func (Float) AsInt() (int64, error) {
	return mixins.Float{"tasks.Float"}.AsInt()
}
func (n Float) AsFloat() (float64, error) {
	return n.x, nil
}
func (Float) AsString() (string, error) {
	return mixins.Float{"tasks.Float"}.AsString()
}
func (Float) AsBytes() ([]byte, error) {
	return mixins.Float{"tasks.Float"}.AsBytes()
}
func (Float) AsLink() (ipld.Link, error) {
	return mixins.Float{"tasks.Float"}.AsLink()
}
func (Float) Prototype() ipld.NodePrototype {
	return _Float__Prototype{}
}
type _Float__Prototype struct{}

func (_Float__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Float__Builder
	nb.Reset()
	return &nb
}
type _Float__Builder struct {
	_Float__Assembler
}
func (nb *_Float__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Float__Builder) Reset() {
	var w _Float
	var m schema.Maybe
	*nb = _Float__Builder{_Float__Assembler{w: &w, m: &m}}
}
type _Float__Assembler struct {
	w *_Float
	m *schema.Maybe
}

func (na *_Float__Assembler) reset() {}
func (_Float__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.FloatAssembler{"tasks.Float"}.BeginMap(0)
}
func (_Float__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.FloatAssembler{"tasks.Float"}.BeginList(0)
}
func (na *_Float__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.FloatAssembler{"tasks.Float"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Float__Assembler) AssignBool(bool) error {
	return mixins.FloatAssembler{"tasks.Float"}.AssignBool(false)
}
func (_Float__Assembler) AssignInt(int64) error {
	return mixins.FloatAssembler{"tasks.Float"}.AssignInt(0)
}
func (na *_Float__Assembler) AssignFloat(v float64) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_Float{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Float__Assembler) AssignString(string) error {
	return mixins.FloatAssembler{"tasks.Float"}.AssignString("")
}
func (_Float__Assembler) AssignBytes([]byte) error {
	return mixins.FloatAssembler{"tasks.Float"}.AssignBytes(nil)
}
func (_Float__Assembler) AssignLink(ipld.Link) error {
	return mixins.FloatAssembler{"tasks.Float"}.AssignLink(nil)
}
func (na *_Float__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Float); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsFloat(); err != nil {
		return err
	} else {
		return na.AssignFloat(v2)
	}
}
func (_Float__Assembler) Prototype() ipld.NodePrototype {
	return _Float__Prototype{}
}
func (Float) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Float) Representation() ipld.Node {
	return (*_Float__Repr)(n)
}
type _Float__Repr = _Float
var _ ipld.Node = &_Float__Repr{}
type _Float__ReprPrototype = _Float__Prototype
type _Float__ReprAssembler = _Float__Assembler

func (n Int) Int() int64 {
	return n.x
}
func (_Int__Prototype) FromInt(v int64) (Int, error) {
	n := _Int{v}
	return &n, nil
}
type _Int__Maybe struct {
	m schema.Maybe
	v Int
}
type MaybeInt = *_Int__Maybe

func (m MaybeInt) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeInt) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeInt) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeInt) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeInt) Must() Int {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (Int)(&_Int{})
var _ schema.TypedNode = (Int)(&_Int{})
func (Int) Kind() ipld.Kind {
	return ipld.Kind_Int
}
func (Int) LookupByString(string) (ipld.Node, error) {
	return mixins.Int{"tasks.Int"}.LookupByString("")
}
func (Int) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Int{"tasks.Int"}.LookupByNode(nil)
}
func (Int) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Int{"tasks.Int"}.LookupByIndex(0)
}
func (Int) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Int{"tasks.Int"}.LookupBySegment(seg)
}
func (Int) MapIterator() ipld.MapIterator {
	return nil
}
func (Int) ListIterator() ipld.ListIterator {
	return nil
}
func (Int) Length() int64 {
	return -1
}
func (Int) IsAbsent() bool {
	return false
}
func (Int) IsNull() bool {
	return false
}
func (Int) AsBool() (bool, error) {
	return mixins.Int{"tasks.Int"}.AsBool()
}
func (n Int) AsInt() (int64, error) {
	return n.x, nil
}
func (Int) AsFloat() (float64, error) {
	return mixins.Int{"tasks.Int"}.AsFloat()
}
func (Int) AsString() (string, error) {
	return mixins.Int{"tasks.Int"}.AsString()
}
func (Int) AsBytes() ([]byte, error) {
	return mixins.Int{"tasks.Int"}.AsBytes()
}
func (Int) AsLink() (ipld.Link, error) {
	return mixins.Int{"tasks.Int"}.AsLink()
}
func (Int) Prototype() ipld.NodePrototype {
	return _Int__Prototype{}
}
type _Int__Prototype struct{}

func (_Int__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Int__Builder
	nb.Reset()
	return &nb
}
type _Int__Builder struct {
	_Int__Assembler
}
func (nb *_Int__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Int__Builder) Reset() {
	var w _Int
	var m schema.Maybe
	*nb = _Int__Builder{_Int__Assembler{w: &w, m: &m}}
}
type _Int__Assembler struct {
	w *_Int
	m *schema.Maybe
}

func (na *_Int__Assembler) reset() {}
func (_Int__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.IntAssembler{"tasks.Int"}.BeginMap(0)
}
func (_Int__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.IntAssembler{"tasks.Int"}.BeginList(0)
}
func (na *_Int__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.IntAssembler{"tasks.Int"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Int__Assembler) AssignBool(bool) error {
	return mixins.IntAssembler{"tasks.Int"}.AssignBool(false)
}
func (na *_Int__Assembler) AssignInt(v int64) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_Int{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Int__Assembler) AssignFloat(float64) error {
	return mixins.IntAssembler{"tasks.Int"}.AssignFloat(0)
}
func (_Int__Assembler) AssignString(string) error {
	return mixins.IntAssembler{"tasks.Int"}.AssignString("")
}
func (_Int__Assembler) AssignBytes([]byte) error {
	return mixins.IntAssembler{"tasks.Int"}.AssignBytes(nil)
}
func (_Int__Assembler) AssignLink(ipld.Link) error {
	return mixins.IntAssembler{"tasks.Int"}.AssignLink(nil)
}
func (na *_Int__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Int); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsInt(); err != nil {
		return err
	} else {
		return na.AssignInt(v2)
	}
}
func (_Int__Assembler) Prototype() ipld.NodePrototype {
	return _Int__Prototype{}
}
func (Int) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Int) Representation() ipld.Node {
	return (*_Int__Repr)(n)
}
type _Int__Repr = _Int
var _ ipld.Node = &_Int__Repr{}
type _Int__ReprPrototype = _Int__Prototype
type _Int__ReprAssembler = _Int__Assembler

func (n Link) Link() ipld.Link {
	return n.x
}
func (_Link__Prototype) FromLink(v ipld.Link) (Link, error) {
	n := _Link{v}
	return &n, nil
}
type _Link__Maybe struct {
	m schema.Maybe
	v Link
}
type MaybeLink = *_Link__Maybe

func (m MaybeLink) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeLink) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeLink) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeLink) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeLink) Must() Link {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (Link)(&_Link{})
var _ schema.TypedNode = (Link)(&_Link{})
func (Link) Kind() ipld.Kind {
	return ipld.Kind_Link
}
func (Link) LookupByString(string) (ipld.Node, error) {
	return mixins.Link{"tasks.Link"}.LookupByString("")
}
func (Link) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Link{"tasks.Link"}.LookupByNode(nil)
}
func (Link) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Link{"tasks.Link"}.LookupByIndex(0)
}
func (Link) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Link{"tasks.Link"}.LookupBySegment(seg)
}
func (Link) MapIterator() ipld.MapIterator {
	return nil
}
func (Link) ListIterator() ipld.ListIterator {
	return nil
}
func (Link) Length() int64 {
	return -1
}
func (Link) IsAbsent() bool {
	return false
}
func (Link) IsNull() bool {
	return false
}
func (Link) AsBool() (bool, error) {
	return mixins.Link{"tasks.Link"}.AsBool()
}
func (Link) AsInt() (int64, error) {
	return mixins.Link{"tasks.Link"}.AsInt()
}
func (Link) AsFloat() (float64, error) {
	return mixins.Link{"tasks.Link"}.AsFloat()
}
func (Link) AsString() (string, error) {
	return mixins.Link{"tasks.Link"}.AsString()
}
func (Link) AsBytes() ([]byte, error) {
	return mixins.Link{"tasks.Link"}.AsBytes()
}
func (n Link) AsLink() (ipld.Link, error) {
	return n.x, nil
}
func (Link) Prototype() ipld.NodePrototype {
	return _Link__Prototype{}
}
type _Link__Prototype struct{}

func (_Link__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Link__Builder
	nb.Reset()
	return &nb
}
type _Link__Builder struct {
	_Link__Assembler
}
func (nb *_Link__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Link__Builder) Reset() {
	var w _Link
	var m schema.Maybe
	*nb = _Link__Builder{_Link__Assembler{w: &w, m: &m}}
}
type _Link__Assembler struct {
	w *_Link
	m *schema.Maybe
}

func (na *_Link__Assembler) reset() {}
func (_Link__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.LinkAssembler{"tasks.Link"}.BeginMap(0)
}
func (_Link__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.LinkAssembler{"tasks.Link"}.BeginList(0)
}
func (na *_Link__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.LinkAssembler{"tasks.Link"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Link__Assembler) AssignBool(bool) error {
	return mixins.LinkAssembler{"tasks.Link"}.AssignBool(false)
}
func (_Link__Assembler) AssignInt(int64) error {
	return mixins.LinkAssembler{"tasks.Link"}.AssignInt(0)
}
func (_Link__Assembler) AssignFloat(float64) error {
	return mixins.LinkAssembler{"tasks.Link"}.AssignFloat(0)
}
func (_Link__Assembler) AssignString(string) error {
	return mixins.LinkAssembler{"tasks.Link"}.AssignString("")
}
func (_Link__Assembler) AssignBytes([]byte) error {
	return mixins.LinkAssembler{"tasks.Link"}.AssignBytes(nil)
}
func (na *_Link__Assembler) AssignLink(v ipld.Link) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_Link{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (na *_Link__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Link); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsLink(); err != nil {
		return err
	} else {
		return na.AssignLink(v2)
	}
}
func (_Link__Assembler) Prototype() ipld.NodePrototype {
	return _Link__Prototype{}
}
func (Link) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Link) Representation() ipld.Node {
	return (*_Link__Repr)(n)
}
type _Link__Repr = _Link
var _ ipld.Node = &_Link__Repr{}
type _Link__ReprPrototype = _Link__Prototype
type _Link__ReprAssembler = _Link__Assembler

func (n Link_RetrievalTask) Link() ipld.Link {
	return n.x
}
func (_Link_RetrievalTask__Prototype) FromLink(v ipld.Link) (Link_RetrievalTask, error) {
	n := _Link_RetrievalTask{v}
	return &n, nil
}
type _Link_RetrievalTask__Maybe struct {
	m schema.Maybe
	v Link_RetrievalTask
}
type MaybeLink_RetrievalTask = *_Link_RetrievalTask__Maybe

func (m MaybeLink_RetrievalTask) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeLink_RetrievalTask) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeLink_RetrievalTask) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeLink_RetrievalTask) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeLink_RetrievalTask) Must() Link_RetrievalTask {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (Link_RetrievalTask)(&_Link_RetrievalTask{})
var _ schema.TypedNode = (Link_RetrievalTask)(&_Link_RetrievalTask{})
func (Link_RetrievalTask) Kind() ipld.Kind {
	return ipld.Kind_Link
}
func (Link_RetrievalTask) LookupByString(string) (ipld.Node, error) {
	return mixins.Link{"tasks.Link_RetrievalTask"}.LookupByString("")
}
func (Link_RetrievalTask) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Link{"tasks.Link_RetrievalTask"}.LookupByNode(nil)
}
func (Link_RetrievalTask) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Link{"tasks.Link_RetrievalTask"}.LookupByIndex(0)
}
func (Link_RetrievalTask) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Link{"tasks.Link_RetrievalTask"}.LookupBySegment(seg)
}
func (Link_RetrievalTask) MapIterator() ipld.MapIterator {
	return nil
}
func (Link_RetrievalTask) ListIterator() ipld.ListIterator {
	return nil
}
func (Link_RetrievalTask) Length() int64 {
	return -1
}
func (Link_RetrievalTask) IsAbsent() bool {
	return false
}
func (Link_RetrievalTask) IsNull() bool {
	return false
}
func (Link_RetrievalTask) AsBool() (bool, error) {
	return mixins.Link{"tasks.Link_RetrievalTask"}.AsBool()
}
func (Link_RetrievalTask) AsInt() (int64, error) {
	return mixins.Link{"tasks.Link_RetrievalTask"}.AsInt()
}
func (Link_RetrievalTask) AsFloat() (float64, error) {
	return mixins.Link{"tasks.Link_RetrievalTask"}.AsFloat()
}
func (Link_RetrievalTask) AsString() (string, error) {
	return mixins.Link{"tasks.Link_RetrievalTask"}.AsString()
}
func (Link_RetrievalTask) AsBytes() ([]byte, error) {
	return mixins.Link{"tasks.Link_RetrievalTask"}.AsBytes()
}
func (n Link_RetrievalTask) AsLink() (ipld.Link, error) {
	return n.x, nil
}
func (Link_RetrievalTask) Prototype() ipld.NodePrototype {
	return _Link_RetrievalTask__Prototype{}
}
type _Link_RetrievalTask__Prototype struct{}

func (_Link_RetrievalTask__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Link_RetrievalTask__Builder
	nb.Reset()
	return &nb
}
type _Link_RetrievalTask__Builder struct {
	_Link_RetrievalTask__Assembler
}
func (nb *_Link_RetrievalTask__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Link_RetrievalTask__Builder) Reset() {
	var w _Link_RetrievalTask
	var m schema.Maybe
	*nb = _Link_RetrievalTask__Builder{_Link_RetrievalTask__Assembler{w: &w, m: &m}}
}
type _Link_RetrievalTask__Assembler struct {
	w *_Link_RetrievalTask
	m *schema.Maybe
}

func (na *_Link_RetrievalTask__Assembler) reset() {}
func (_Link_RetrievalTask__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.LinkAssembler{"tasks.Link_RetrievalTask"}.BeginMap(0)
}
func (_Link_RetrievalTask__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.LinkAssembler{"tasks.Link_RetrievalTask"}.BeginList(0)
}
func (na *_Link_RetrievalTask__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.LinkAssembler{"tasks.Link_RetrievalTask"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Link_RetrievalTask__Assembler) AssignBool(bool) error {
	return mixins.LinkAssembler{"tasks.Link_RetrievalTask"}.AssignBool(false)
}
func (_Link_RetrievalTask__Assembler) AssignInt(int64) error {
	return mixins.LinkAssembler{"tasks.Link_RetrievalTask"}.AssignInt(0)
}
func (_Link_RetrievalTask__Assembler) AssignFloat(float64) error {
	return mixins.LinkAssembler{"tasks.Link_RetrievalTask"}.AssignFloat(0)
}
func (_Link_RetrievalTask__Assembler) AssignString(string) error {
	return mixins.LinkAssembler{"tasks.Link_RetrievalTask"}.AssignString("")
}
func (_Link_RetrievalTask__Assembler) AssignBytes([]byte) error {
	return mixins.LinkAssembler{"tasks.Link_RetrievalTask"}.AssignBytes(nil)
}
func (na *_Link_RetrievalTask__Assembler) AssignLink(v ipld.Link) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_Link_RetrievalTask{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (na *_Link_RetrievalTask__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Link_RetrievalTask); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsLink(); err != nil {
		return err
	} else {
		return na.AssignLink(v2)
	}
}
func (_Link_RetrievalTask__Assembler) Prototype() ipld.NodePrototype {
	return _Link_RetrievalTask__Prototype{}
}
func (Link_RetrievalTask) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (Link_RetrievalTask) LinkTargetNodePrototype() ipld.NodePrototype {
	return Type.Link_RetrievalTask__Repr
}
func (n Link_RetrievalTask) Representation() ipld.Node {
	return (*_Link_RetrievalTask__Repr)(n)
}
type _Link_RetrievalTask__Repr = _Link_RetrievalTask
var _ ipld.Node = &_Link_RetrievalTask__Repr{}
type _Link_RetrievalTask__ReprPrototype = _Link_RetrievalTask__Prototype
type _Link_RetrievalTask__ReprAssembler = _Link_RetrievalTask__Assembler

func (n Link_StageDetails) Link() ipld.Link {
	return n.x
}
func (_Link_StageDetails__Prototype) FromLink(v ipld.Link) (Link_StageDetails, error) {
	n := _Link_StageDetails{v}
	return &n, nil
}
type _Link_StageDetails__Maybe struct {
	m schema.Maybe
	v Link_StageDetails
}
type MaybeLink_StageDetails = *_Link_StageDetails__Maybe

func (m MaybeLink_StageDetails) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeLink_StageDetails) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeLink_StageDetails) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeLink_StageDetails) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeLink_StageDetails) Must() Link_StageDetails {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (Link_StageDetails)(&_Link_StageDetails{})
var _ schema.TypedNode = (Link_StageDetails)(&_Link_StageDetails{})
func (Link_StageDetails) Kind() ipld.Kind {
	return ipld.Kind_Link
}
func (Link_StageDetails) LookupByString(string) (ipld.Node, error) {
	return mixins.Link{"tasks.Link_StageDetails"}.LookupByString("")
}
func (Link_StageDetails) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Link{"tasks.Link_StageDetails"}.LookupByNode(nil)
}
func (Link_StageDetails) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Link{"tasks.Link_StageDetails"}.LookupByIndex(0)
}
func (Link_StageDetails) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Link{"tasks.Link_StageDetails"}.LookupBySegment(seg)
}
func (Link_StageDetails) MapIterator() ipld.MapIterator {
	return nil
}
func (Link_StageDetails) ListIterator() ipld.ListIterator {
	return nil
}
func (Link_StageDetails) Length() int64 {
	return -1
}
func (Link_StageDetails) IsAbsent() bool {
	return false
}
func (Link_StageDetails) IsNull() bool {
	return false
}
func (Link_StageDetails) AsBool() (bool, error) {
	return mixins.Link{"tasks.Link_StageDetails"}.AsBool()
}
func (Link_StageDetails) AsInt() (int64, error) {
	return mixins.Link{"tasks.Link_StageDetails"}.AsInt()
}
func (Link_StageDetails) AsFloat() (float64, error) {
	return mixins.Link{"tasks.Link_StageDetails"}.AsFloat()
}
func (Link_StageDetails) AsString() (string, error) {
	return mixins.Link{"tasks.Link_StageDetails"}.AsString()
}
func (Link_StageDetails) AsBytes() ([]byte, error) {
	return mixins.Link{"tasks.Link_StageDetails"}.AsBytes()
}
func (n Link_StageDetails) AsLink() (ipld.Link, error) {
	return n.x, nil
}
func (Link_StageDetails) Prototype() ipld.NodePrototype {
	return _Link_StageDetails__Prototype{}
}
type _Link_StageDetails__Prototype struct{}

func (_Link_StageDetails__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Link_StageDetails__Builder
	nb.Reset()
	return &nb
}
type _Link_StageDetails__Builder struct {
	_Link_StageDetails__Assembler
}
func (nb *_Link_StageDetails__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Link_StageDetails__Builder) Reset() {
	var w _Link_StageDetails
	var m schema.Maybe
	*nb = _Link_StageDetails__Builder{_Link_StageDetails__Assembler{w: &w, m: &m}}
}
type _Link_StageDetails__Assembler struct {
	w *_Link_StageDetails
	m *schema.Maybe
}

func (na *_Link_StageDetails__Assembler) reset() {}
func (_Link_StageDetails__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.LinkAssembler{"tasks.Link_StageDetails"}.BeginMap(0)
}
func (_Link_StageDetails__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.LinkAssembler{"tasks.Link_StageDetails"}.BeginList(0)
}
func (na *_Link_StageDetails__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.LinkAssembler{"tasks.Link_StageDetails"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Link_StageDetails__Assembler) AssignBool(bool) error {
	return mixins.LinkAssembler{"tasks.Link_StageDetails"}.AssignBool(false)
}
func (_Link_StageDetails__Assembler) AssignInt(int64) error {
	return mixins.LinkAssembler{"tasks.Link_StageDetails"}.AssignInt(0)
}
func (_Link_StageDetails__Assembler) AssignFloat(float64) error {
	return mixins.LinkAssembler{"tasks.Link_StageDetails"}.AssignFloat(0)
}
func (_Link_StageDetails__Assembler) AssignString(string) error {
	return mixins.LinkAssembler{"tasks.Link_StageDetails"}.AssignString("")
}
func (_Link_StageDetails__Assembler) AssignBytes([]byte) error {
	return mixins.LinkAssembler{"tasks.Link_StageDetails"}.AssignBytes(nil)
}
func (na *_Link_StageDetails__Assembler) AssignLink(v ipld.Link) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_Link_StageDetails{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (na *_Link_StageDetails__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Link_StageDetails); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsLink(); err != nil {
		return err
	} else {
		return na.AssignLink(v2)
	}
}
func (_Link_StageDetails__Assembler) Prototype() ipld.NodePrototype {
	return _Link_StageDetails__Prototype{}
}
func (Link_StageDetails) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (Link_StageDetails) LinkTargetNodePrototype() ipld.NodePrototype {
	return Type.Link_StageDetails__Repr
}
func (n Link_StageDetails) Representation() ipld.Node {
	return (*_Link_StageDetails__Repr)(n)
}
type _Link_StageDetails__Repr = _Link_StageDetails
var _ ipld.Node = &_Link_StageDetails__Repr{}
type _Link_StageDetails__ReprPrototype = _Link_StageDetails__Prototype
type _Link_StageDetails__ReprAssembler = _Link_StageDetails__Assembler

func (n Link_StorageTask) Link() ipld.Link {
	return n.x
}
func (_Link_StorageTask__Prototype) FromLink(v ipld.Link) (Link_StorageTask, error) {
	n := _Link_StorageTask{v}
	return &n, nil
}
type _Link_StorageTask__Maybe struct {
	m schema.Maybe
	v Link_StorageTask
}
type MaybeLink_StorageTask = *_Link_StorageTask__Maybe

func (m MaybeLink_StorageTask) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeLink_StorageTask) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeLink_StorageTask) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeLink_StorageTask) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeLink_StorageTask) Must() Link_StorageTask {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (Link_StorageTask)(&_Link_StorageTask{})
var _ schema.TypedNode = (Link_StorageTask)(&_Link_StorageTask{})
func (Link_StorageTask) Kind() ipld.Kind {
	return ipld.Kind_Link
}
func (Link_StorageTask) LookupByString(string) (ipld.Node, error) {
	return mixins.Link{"tasks.Link_StorageTask"}.LookupByString("")
}
func (Link_StorageTask) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Link{"tasks.Link_StorageTask"}.LookupByNode(nil)
}
func (Link_StorageTask) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Link{"tasks.Link_StorageTask"}.LookupByIndex(0)
}
func (Link_StorageTask) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Link{"tasks.Link_StorageTask"}.LookupBySegment(seg)
}
func (Link_StorageTask) MapIterator() ipld.MapIterator {
	return nil
}
func (Link_StorageTask) ListIterator() ipld.ListIterator {
	return nil
}
func (Link_StorageTask) Length() int64 {
	return -1
}
func (Link_StorageTask) IsAbsent() bool {
	return false
}
func (Link_StorageTask) IsNull() bool {
	return false
}
func (Link_StorageTask) AsBool() (bool, error) {
	return mixins.Link{"tasks.Link_StorageTask"}.AsBool()
}
func (Link_StorageTask) AsInt() (int64, error) {
	return mixins.Link{"tasks.Link_StorageTask"}.AsInt()
}
func (Link_StorageTask) AsFloat() (float64, error) {
	return mixins.Link{"tasks.Link_StorageTask"}.AsFloat()
}
func (Link_StorageTask) AsString() (string, error) {
	return mixins.Link{"tasks.Link_StorageTask"}.AsString()
}
func (Link_StorageTask) AsBytes() ([]byte, error) {
	return mixins.Link{"tasks.Link_StorageTask"}.AsBytes()
}
func (n Link_StorageTask) AsLink() (ipld.Link, error) {
	return n.x, nil
}
func (Link_StorageTask) Prototype() ipld.NodePrototype {
	return _Link_StorageTask__Prototype{}
}
type _Link_StorageTask__Prototype struct{}

func (_Link_StorageTask__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Link_StorageTask__Builder
	nb.Reset()
	return &nb
}
type _Link_StorageTask__Builder struct {
	_Link_StorageTask__Assembler
}
func (nb *_Link_StorageTask__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Link_StorageTask__Builder) Reset() {
	var w _Link_StorageTask
	var m schema.Maybe
	*nb = _Link_StorageTask__Builder{_Link_StorageTask__Assembler{w: &w, m: &m}}
}
type _Link_StorageTask__Assembler struct {
	w *_Link_StorageTask
	m *schema.Maybe
}

func (na *_Link_StorageTask__Assembler) reset() {}
func (_Link_StorageTask__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.LinkAssembler{"tasks.Link_StorageTask"}.BeginMap(0)
}
func (_Link_StorageTask__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.LinkAssembler{"tasks.Link_StorageTask"}.BeginList(0)
}
func (na *_Link_StorageTask__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.LinkAssembler{"tasks.Link_StorageTask"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Link_StorageTask__Assembler) AssignBool(bool) error {
	return mixins.LinkAssembler{"tasks.Link_StorageTask"}.AssignBool(false)
}
func (_Link_StorageTask__Assembler) AssignInt(int64) error {
	return mixins.LinkAssembler{"tasks.Link_StorageTask"}.AssignInt(0)
}
func (_Link_StorageTask__Assembler) AssignFloat(float64) error {
	return mixins.LinkAssembler{"tasks.Link_StorageTask"}.AssignFloat(0)
}
func (_Link_StorageTask__Assembler) AssignString(string) error {
	return mixins.LinkAssembler{"tasks.Link_StorageTask"}.AssignString("")
}
func (_Link_StorageTask__Assembler) AssignBytes([]byte) error {
	return mixins.LinkAssembler{"tasks.Link_StorageTask"}.AssignBytes(nil)
}
func (na *_Link_StorageTask__Assembler) AssignLink(v ipld.Link) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_Link_StorageTask{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (na *_Link_StorageTask__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Link_StorageTask); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsLink(); err != nil {
		return err
	} else {
		return na.AssignLink(v2)
	}
}
func (_Link_StorageTask__Assembler) Prototype() ipld.NodePrototype {
	return _Link_StorageTask__Prototype{}
}
func (Link_StorageTask) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (Link_StorageTask) LinkTargetNodePrototype() ipld.NodePrototype {
	return Type.Link_StorageTask__Repr
}
func (n Link_StorageTask) Representation() ipld.Node {
	return (*_Link_StorageTask__Repr)(n)
}
type _Link_StorageTask__Repr = _Link_StorageTask
var _ ipld.Node = &_Link_StorageTask__Repr{}
type _Link_StorageTask__ReprPrototype = _Link_StorageTask__Prototype
type _Link_StorageTask__ReprAssembler = _Link_StorageTask__Assembler

func (n *_List) Lookup(idx int64) Any {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	if v.m == schema.Maybe_Null {
		return nil
	}
	return v.v
}
func (n *_List) LookupMaybe(idx int64) MaybeAny {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return v
}

var _List__valueAbsent = _Any__Maybe{m:schema.Maybe_Absent}
func (n List) Iterator() *List__Itr {
	return &List__Itr{n, 0}
}

type List__Itr struct {
	n List
	idx  int
}

func (itr *List__Itr) Next() (idx int64, v MaybeAny) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil
	}
	idx = int64(itr.idx)
	v = &itr.n.x[itr.idx]
	itr.idx++
	return
}
func (itr *List__Itr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

type _List__Maybe struct {
	m schema.Maybe
	v List
}
type MaybeList = *_List__Maybe

func (m MaybeList) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeList) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeList) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeList) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeList) Must() List {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (List)(&_List{})
var _ schema.TypedNode = (List)(&_List{})
func (List) Kind() ipld.Kind {
	return ipld.Kind_List
}
func (List) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"tasks.List"}.LookupByString("")
}
func (n List) LookupByNode(k ipld.Node) (ipld.Node, error) {
	idx, err := k.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(idx)
}
func (n List) LookupByIndex(idx int64) (ipld.Node, error) {
	if n.Length() <= idx {
		return nil, ipld.ErrNotExists{ipld.PathSegmentOfInt(idx)}
	}
	v := &n.x[idx]
	if v.m == schema.Maybe_Null {
		return ipld.Null, nil
	}
	return v.v, nil
}
func (n List) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "tasks.List", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (List) MapIterator() ipld.MapIterator {
	return nil
}
func (n List) ListIterator() ipld.ListIterator {
	return &_List__ListItr{n, 0}
}

type _List__ListItr struct {
	n List
	idx  int
}

func (itr *_List__ListItr) Next() (idx int64, v ipld.Node, _ error) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	idx = int64(itr.idx)
	x := &itr.n.x[itr.idx]
	switch x.m {
	case schema.Maybe_Null:
		v = ipld.Null
	case schema.Maybe_Value:
		v = x.v
	}
	itr.idx++
	return
}
func (itr *_List__ListItr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

func (n List) Length() int64 {
	return int64(len(n.x))
}
func (List) IsAbsent() bool {
	return false
}
func (List) IsNull() bool {
	return false
}
func (List) AsBool() (bool, error) {
	return mixins.List{"tasks.List"}.AsBool()
}
func (List) AsInt() (int64, error) {
	return mixins.List{"tasks.List"}.AsInt()
}
func (List) AsFloat() (float64, error) {
	return mixins.List{"tasks.List"}.AsFloat()
}
func (List) AsString() (string, error) {
	return mixins.List{"tasks.List"}.AsString()
}
func (List) AsBytes() ([]byte, error) {
	return mixins.List{"tasks.List"}.AsBytes()
}
func (List) AsLink() (ipld.Link, error) {
	return mixins.List{"tasks.List"}.AsLink()
}
func (List) Prototype() ipld.NodePrototype {
	return _List__Prototype{}
}
type _List__Prototype struct{}

func (_List__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _List__Builder
	nb.Reset()
	return &nb
}
type _List__Builder struct {
	_List__Assembler
}
func (nb *_List__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_List__Builder) Reset() {
	var w _List
	var m schema.Maybe
	*nb = _List__Builder{_List__Assembler{w: &w, m: &m}}
}
type _List__Assembler struct {
	w *_List
	m *schema.Maybe
	state laState

	
	va _Any__Assembler
}

func (na *_List__Assembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_List__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"tasks.List"}.BeginMap(0)
}
func (na *_List__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if na.w == nil {
		na.w = &_List{}
	}
	if sizeHint > 0 {
		na.w.x = make([]_Any__Maybe, 0, sizeHint)
	}
	return na, nil
}
func (na *_List__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"tasks.List"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_List__Assembler) AssignBool(bool) error {
	return mixins.ListAssembler{"tasks.List"}.AssignBool(false)
}
func (_List__Assembler) AssignInt(int64) error {
	return mixins.ListAssembler{"tasks.List"}.AssignInt(0)
}
func (_List__Assembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"tasks.List"}.AssignFloat(0)
}
func (_List__Assembler) AssignString(string) error {
	return mixins.ListAssembler{"tasks.List"}.AssignString("")
}
func (_List__Assembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"tasks.List"}.AssignBytes(nil)
}
func (_List__Assembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"tasks.List"}.AssignLink(nil)
}
func (na *_List__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_List); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_List {
		return ipld.ErrWrongKind{TypeName: "tasks.List", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_List__Assembler) Prototype() ipld.NodePrototype {
	return _List__Prototype{}
}
func (la *_List__Assembler) valueFinishTidy() bool {
	row := &la.w.x[len(la.w.x)-1]
	switch row.m {
	case schema.Maybe_Value:
		row.v = la.va.w
		la.va.w = nil
		fallthrough
	case schema.Maybe_Null:
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_List__Assembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Any__Maybe{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.m = &row.m
	row.m = allowNull
	return &la.va
}
func (la *_List__Assembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_List__Assembler) ValuePrototype(_ int64) ipld.NodePrototype {
	return _Any__Prototype{}
}
func (List) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n List) Representation() ipld.Node {
	return (*_List__Repr)(n)
}
type _List__Repr _List
var _ ipld.Node = &_List__Repr{}
func (_List__Repr) Kind() ipld.Kind {
	return ipld.Kind_List
}
func (_List__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"tasks.List.Repr"}.LookupByString("")
}
func (nr *_List__Repr) LookupByNode(k ipld.Node) (ipld.Node, error) {
	v, err := (List)(nr).LookupByNode(k)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(Any).Representation(), nil
}
func (nr *_List__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	v, err := (List)(nr).LookupByIndex(idx)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(Any).Representation(), nil
}
func (n _List__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "tasks.List.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_List__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (nr *_List__Repr) ListIterator() ipld.ListIterator {
	return &_List__ReprListItr{(List)(nr), 0}
}

type _List__ReprListItr _List__ListItr

func (itr *_List__ReprListItr) Next() (idx int64, v ipld.Node, err error) {
	idx, v, err = (*_List__ListItr)(itr).Next()
	if err != nil || v == ipld.Null {
		return
	}
	return idx, v.(Any).Representation(), nil
}
func (itr *_List__ReprListItr) Done() bool {
	return (*_List__ListItr)(itr).Done()
}

func (rn *_List__Repr) Length() int64 {
	return int64(len(rn.x))
}
func (_List__Repr) IsAbsent() bool {
	return false
}
func (_List__Repr) IsNull() bool {
	return false
}
func (_List__Repr) AsBool() (bool, error) {
	return mixins.List{"tasks.List.Repr"}.AsBool()
}
func (_List__Repr) AsInt() (int64, error) {
	return mixins.List{"tasks.List.Repr"}.AsInt()
}
func (_List__Repr) AsFloat() (float64, error) {
	return mixins.List{"tasks.List.Repr"}.AsFloat()
}
func (_List__Repr) AsString() (string, error) {
	return mixins.List{"tasks.List.Repr"}.AsString()
}
func (_List__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"tasks.List.Repr"}.AsBytes()
}
func (_List__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"tasks.List.Repr"}.AsLink()
}
func (_List__Repr) Prototype() ipld.NodePrototype {
	return _List__ReprPrototype{}
}
type _List__ReprPrototype struct{}

func (_List__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _List__ReprBuilder
	nb.Reset()
	return &nb
}
type _List__ReprBuilder struct {
	_List__ReprAssembler
}
func (nb *_List__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_List__ReprBuilder) Reset() {
	var w _List
	var m schema.Maybe
	*nb = _List__ReprBuilder{_List__ReprAssembler{w: &w, m: &m}}
}
type _List__ReprAssembler struct {
	w *_List
	m *schema.Maybe
	state laState

	
	va _Any__ReprAssembler
}

func (na *_List__ReprAssembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_List__ReprAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"tasks.List.Repr"}.BeginMap(0)
}
func (na *_List__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if na.w == nil {
		na.w = &_List{}
	}
	if sizeHint > 0 {
		na.w.x = make([]_Any__Maybe, 0, sizeHint)
	}
	return na, nil
}
func (na *_List__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"tasks.List.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_List__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"tasks.List.Repr"}.AssignBool(false)
}
func (_List__ReprAssembler) AssignInt(int64) error {
	return mixins.ListAssembler{"tasks.List.Repr"}.AssignInt(0)
}
func (_List__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"tasks.List.Repr"}.AssignFloat(0)
}
func (_List__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"tasks.List.Repr"}.AssignString("")
}
func (_List__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"tasks.List.Repr"}.AssignBytes(nil)
}
func (_List__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"tasks.List.Repr"}.AssignLink(nil)
}
func (na *_List__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_List); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_List {
		return ipld.ErrWrongKind{TypeName: "tasks.List.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_List__ReprAssembler) Prototype() ipld.NodePrototype {
	return _List__ReprPrototype{}
}
func (la *_List__ReprAssembler) valueFinishTidy() bool {
	row := &la.w.x[len(la.w.x)-1]
	switch row.m {
	case schema.Maybe_Value:
		row.v = la.va.w
		la.va.w = nil
		fallthrough
	case schema.Maybe_Null:
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_List__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Any__Maybe{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.m = &row.m
	row.m = allowNull
	return &la.va
}
func (la *_List__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_List__ReprAssembler) ValuePrototype(_ int64) ipld.NodePrototype {
	return _Any__ReprPrototype{}
}

func (n *_List_Logs) Lookup(idx int64) Logs {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return v
}
func (n *_List_Logs) LookupMaybe(idx int64) MaybeLogs {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return &_Logs__Maybe{
		m: schema.Maybe_Value,
		v: v,
	}
}

var _List_Logs__valueAbsent = _Logs__Maybe{m:schema.Maybe_Absent}
func (n List_Logs) Iterator() *List_Logs__Itr {
	return &List_Logs__Itr{n, 0}
}

type List_Logs__Itr struct {
	n List_Logs
	idx  int
}

func (itr *List_Logs__Itr) Next() (idx int64, v Logs) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil
	}
	idx = int64(itr.idx)
	v = &itr.n.x[itr.idx]
	itr.idx++
	return
}
func (itr *List_Logs__Itr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

type _List_Logs__Maybe struct {
	m schema.Maybe
	v List_Logs
}
type MaybeList_Logs = *_List_Logs__Maybe

func (m MaybeList_Logs) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeList_Logs) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeList_Logs) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeList_Logs) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeList_Logs) Must() List_Logs {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (List_Logs)(&_List_Logs{})
var _ schema.TypedNode = (List_Logs)(&_List_Logs{})
func (List_Logs) Kind() ipld.Kind {
	return ipld.Kind_List
}
func (List_Logs) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"tasks.List_Logs"}.LookupByString("")
}
func (n List_Logs) LookupByNode(k ipld.Node) (ipld.Node, error) {
	idx, err := k.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(idx)
}
func (n List_Logs) LookupByIndex(idx int64) (ipld.Node, error) {
	if n.Length() <= idx {
		return nil, ipld.ErrNotExists{ipld.PathSegmentOfInt(idx)}
	}
	v := &n.x[idx]
	return v, nil
}
func (n List_Logs) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "tasks.List_Logs", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (List_Logs) MapIterator() ipld.MapIterator {
	return nil
}
func (n List_Logs) ListIterator() ipld.ListIterator {
	return &_List_Logs__ListItr{n, 0}
}

type _List_Logs__ListItr struct {
	n List_Logs
	idx  int
}

func (itr *_List_Logs__ListItr) Next() (idx int64, v ipld.Node, _ error) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	idx = int64(itr.idx)
	x := &itr.n.x[itr.idx]
	v = x
	itr.idx++
	return
}
func (itr *_List_Logs__ListItr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

func (n List_Logs) Length() int64 {
	return int64(len(n.x))
}
func (List_Logs) IsAbsent() bool {
	return false
}
func (List_Logs) IsNull() bool {
	return false
}
func (List_Logs) AsBool() (bool, error) {
	return mixins.List{"tasks.List_Logs"}.AsBool()
}
func (List_Logs) AsInt() (int64, error) {
	return mixins.List{"tasks.List_Logs"}.AsInt()
}
func (List_Logs) AsFloat() (float64, error) {
	return mixins.List{"tasks.List_Logs"}.AsFloat()
}
func (List_Logs) AsString() (string, error) {
	return mixins.List{"tasks.List_Logs"}.AsString()
}
func (List_Logs) AsBytes() ([]byte, error) {
	return mixins.List{"tasks.List_Logs"}.AsBytes()
}
func (List_Logs) AsLink() (ipld.Link, error) {
	return mixins.List{"tasks.List_Logs"}.AsLink()
}
func (List_Logs) Prototype() ipld.NodePrototype {
	return _List_Logs__Prototype{}
}
type _List_Logs__Prototype struct{}

func (_List_Logs__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _List_Logs__Builder
	nb.Reset()
	return &nb
}
type _List_Logs__Builder struct {
	_List_Logs__Assembler
}
func (nb *_List_Logs__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_List_Logs__Builder) Reset() {
	var w _List_Logs
	var m schema.Maybe
	*nb = _List_Logs__Builder{_List_Logs__Assembler{w: &w, m: &m}}
}
type _List_Logs__Assembler struct {
	w *_List_Logs
	m *schema.Maybe
	state laState

	cm schema.Maybe
	va _Logs__Assembler
}

func (na *_List_Logs__Assembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_List_Logs__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"tasks.List_Logs"}.BeginMap(0)
}
func (na *_List_Logs__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if na.w == nil {
		na.w = &_List_Logs{}
	}
	if sizeHint > 0 {
		na.w.x = make([]_Logs, 0, sizeHint)
	}
	return na, nil
}
func (na *_List_Logs__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"tasks.List_Logs"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_List_Logs__Assembler) AssignBool(bool) error {
	return mixins.ListAssembler{"tasks.List_Logs"}.AssignBool(false)
}
func (_List_Logs__Assembler) AssignInt(int64) error {
	return mixins.ListAssembler{"tasks.List_Logs"}.AssignInt(0)
}
func (_List_Logs__Assembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"tasks.List_Logs"}.AssignFloat(0)
}
func (_List_Logs__Assembler) AssignString(string) error {
	return mixins.ListAssembler{"tasks.List_Logs"}.AssignString("")
}
func (_List_Logs__Assembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"tasks.List_Logs"}.AssignBytes(nil)
}
func (_List_Logs__Assembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"tasks.List_Logs"}.AssignLink(nil)
}
func (na *_List_Logs__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_List_Logs); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_List {
		return ipld.ErrWrongKind{TypeName: "tasks.List_Logs", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_List_Logs__Assembler) Prototype() ipld.NodePrototype {
	return _List_Logs__Prototype{}
}
func (la *_List_Logs__Assembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_List_Logs__Assembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Logs{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_List_Logs__Assembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_List_Logs__Assembler) ValuePrototype(_ int64) ipld.NodePrototype {
	return _Logs__Prototype{}
}
func (List_Logs) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n List_Logs) Representation() ipld.Node {
	return (*_List_Logs__Repr)(n)
}
type _List_Logs__Repr _List_Logs
var _ ipld.Node = &_List_Logs__Repr{}
func (_List_Logs__Repr) Kind() ipld.Kind {
	return ipld.Kind_List
}
func (_List_Logs__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"tasks.List_Logs.Repr"}.LookupByString("")
}
func (nr *_List_Logs__Repr) LookupByNode(k ipld.Node) (ipld.Node, error) {
	v, err := (List_Logs)(nr).LookupByNode(k)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(Logs).Representation(), nil
}
func (nr *_List_Logs__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	v, err := (List_Logs)(nr).LookupByIndex(idx)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(Logs).Representation(), nil
}
func (n _List_Logs__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "tasks.List_Logs.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_List_Logs__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (nr *_List_Logs__Repr) ListIterator() ipld.ListIterator {
	return &_List_Logs__ReprListItr{(List_Logs)(nr), 0}
}

type _List_Logs__ReprListItr _List_Logs__ListItr

func (itr *_List_Logs__ReprListItr) Next() (idx int64, v ipld.Node, err error) {
	idx, v, err = (*_List_Logs__ListItr)(itr).Next()
	if err != nil || v == ipld.Null {
		return
	}
	return idx, v.(Logs).Representation(), nil
}
func (itr *_List_Logs__ReprListItr) Done() bool {
	return (*_List_Logs__ListItr)(itr).Done()
}

func (rn *_List_Logs__Repr) Length() int64 {
	return int64(len(rn.x))
}
func (_List_Logs__Repr) IsAbsent() bool {
	return false
}
func (_List_Logs__Repr) IsNull() bool {
	return false
}
func (_List_Logs__Repr) AsBool() (bool, error) {
	return mixins.List{"tasks.List_Logs.Repr"}.AsBool()
}
func (_List_Logs__Repr) AsInt() (int64, error) {
	return mixins.List{"tasks.List_Logs.Repr"}.AsInt()
}
func (_List_Logs__Repr) AsFloat() (float64, error) {
	return mixins.List{"tasks.List_Logs.Repr"}.AsFloat()
}
func (_List_Logs__Repr) AsString() (string, error) {
	return mixins.List{"tasks.List_Logs.Repr"}.AsString()
}
func (_List_Logs__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"tasks.List_Logs.Repr"}.AsBytes()
}
func (_List_Logs__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"tasks.List_Logs.Repr"}.AsLink()
}
func (_List_Logs__Repr) Prototype() ipld.NodePrototype {
	return _List_Logs__ReprPrototype{}
}
type _List_Logs__ReprPrototype struct{}

func (_List_Logs__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _List_Logs__ReprBuilder
	nb.Reset()
	return &nb
}
type _List_Logs__ReprBuilder struct {
	_List_Logs__ReprAssembler
}
func (nb *_List_Logs__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_List_Logs__ReprBuilder) Reset() {
	var w _List_Logs
	var m schema.Maybe
	*nb = _List_Logs__ReprBuilder{_List_Logs__ReprAssembler{w: &w, m: &m}}
}
type _List_Logs__ReprAssembler struct {
	w *_List_Logs
	m *schema.Maybe
	state laState

	cm schema.Maybe
	va _Logs__ReprAssembler
}

func (na *_List_Logs__ReprAssembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_List_Logs__ReprAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"tasks.List_Logs.Repr"}.BeginMap(0)
}
func (na *_List_Logs__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if na.w == nil {
		na.w = &_List_Logs{}
	}
	if sizeHint > 0 {
		na.w.x = make([]_Logs, 0, sizeHint)
	}
	return na, nil
}
func (na *_List_Logs__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"tasks.List_Logs.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_List_Logs__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"tasks.List_Logs.Repr"}.AssignBool(false)
}
func (_List_Logs__ReprAssembler) AssignInt(int64) error {
	return mixins.ListAssembler{"tasks.List_Logs.Repr"}.AssignInt(0)
}
func (_List_Logs__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"tasks.List_Logs.Repr"}.AssignFloat(0)
}
func (_List_Logs__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"tasks.List_Logs.Repr"}.AssignString("")
}
func (_List_Logs__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"tasks.List_Logs.Repr"}.AssignBytes(nil)
}
func (_List_Logs__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"tasks.List_Logs.Repr"}.AssignLink(nil)
}
func (na *_List_Logs__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_List_Logs); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_List {
		return ipld.ErrWrongKind{TypeName: "tasks.List_Logs.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_List_Logs__ReprAssembler) Prototype() ipld.NodePrototype {
	return _List_Logs__ReprPrototype{}
}
func (la *_List_Logs__ReprAssembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_List_Logs__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Logs{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_List_Logs__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_List_Logs__ReprAssembler) ValuePrototype(_ int64) ipld.NodePrototype {
	return _Logs__ReprPrototype{}
}


func (n _Logs) FieldLog() String {
	return &n.Log
}
func (n _Logs) FieldUpdatedAt() Time {
	return &n.UpdatedAt
}
type _Logs__Maybe struct {
	m schema.Maybe
	v Logs
}
type MaybeLogs = *_Logs__Maybe

func (m MaybeLogs) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeLogs) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeLogs) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeLogs) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeLogs) Must() Logs {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__Logs_Log = _String{"Log"}
	fieldName__Logs_UpdatedAt = _String{"UpdatedAt"}
)
var _ ipld.Node = (Logs)(&_Logs{})
var _ schema.TypedNode = (Logs)(&_Logs{})
func (Logs) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n Logs) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Log":
		return &n.Log, nil
	case "UpdatedAt":
		return &n.UpdatedAt, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n Logs) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (Logs) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{"tasks.Logs"}.LookupByIndex(0)
}
func (n Logs) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Logs) MapIterator() ipld.MapIterator {
	return &_Logs__MapItr{n, 0}
}

type _Logs__MapItr struct {
	n Logs
	idx  int
}

func (itr *_Logs__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 2 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__Logs_Log
		v = &itr.n.Log
	case 1:
		k = &fieldName__Logs_UpdatedAt
		v = &itr.n.UpdatedAt
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_Logs__MapItr) Done() bool {
	return itr.idx >= 2
}

func (Logs) ListIterator() ipld.ListIterator {
	return nil
}
func (Logs) Length() int64 {
	return 2
}
func (Logs) IsAbsent() bool {
	return false
}
func (Logs) IsNull() bool {
	return false
}
func (Logs) AsBool() (bool, error) {
	return mixins.Map{"tasks.Logs"}.AsBool()
}
func (Logs) AsInt() (int64, error) {
	return mixins.Map{"tasks.Logs"}.AsInt()
}
func (Logs) AsFloat() (float64, error) {
	return mixins.Map{"tasks.Logs"}.AsFloat()
}
func (Logs) AsString() (string, error) {
	return mixins.Map{"tasks.Logs"}.AsString()
}
func (Logs) AsBytes() ([]byte, error) {
	return mixins.Map{"tasks.Logs"}.AsBytes()
}
func (Logs) AsLink() (ipld.Link, error) {
	return mixins.Map{"tasks.Logs"}.AsLink()
}
func (Logs) Prototype() ipld.NodePrototype {
	return _Logs__Prototype{}
}
type _Logs__Prototype struct{}

func (_Logs__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Logs__Builder
	nb.Reset()
	return &nb
}
type _Logs__Builder struct {
	_Logs__Assembler
}
func (nb *_Logs__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Logs__Builder) Reset() {
	var w _Logs
	var m schema.Maybe
	*nb = _Logs__Builder{_Logs__Assembler{w: &w, m: &m}}
}
type _Logs__Assembler struct {
	w *_Logs
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_Log _String__Assembler
	ca_UpdatedAt _Time__Assembler
	}

func (na *_Logs__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Log.reset()
	na.ca_UpdatedAt.reset()
}

var (
	fieldBit__Logs_Log = 1 << 0
	fieldBit__Logs_UpdatedAt = 1 << 1
	fieldBits__Logs_sufficient = 0 + 1 << 0 + 1 << 1
)
func (na *_Logs__Assembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Logs{}
	}
	return na, nil
}
func (_Logs__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"tasks.Logs"}.BeginList(0)
}
func (na *_Logs__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"tasks.Logs"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Logs__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"tasks.Logs"}.AssignBool(false)
}
func (_Logs__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{"tasks.Logs"}.AssignInt(0)
}
func (_Logs__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"tasks.Logs"}.AssignFloat(0)
}
func (_Logs__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"tasks.Logs"}.AssignString("")
}
func (_Logs__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"tasks.Logs"}.AssignBytes(nil)
}
func (_Logs__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"tasks.Logs"}.AssignLink(nil)
}
func (na *_Logs__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Logs); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "tasks.Logs", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Logs__Assembler) Prototype() ipld.NodePrototype {
	return _Logs__Prototype{}
}
func (ma *_Logs__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Log.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_UpdatedAt.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_Logs__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Log":
		if ma.s & fieldBit__Logs_Log != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Logs_Log}
		}
		ma.s += fieldBit__Logs_Log
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Log.w = &ma.w.Log
		ma.ca_Log.m = &ma.cm
		return &ma.ca_Log, nil
	case "UpdatedAt":
		if ma.s & fieldBit__Logs_UpdatedAt != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Logs_UpdatedAt}
		}
		ma.s += fieldBit__Logs_UpdatedAt
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_UpdatedAt.w = &ma.w.UpdatedAt
		ma.ca_UpdatedAt.m = &ma.cm
		return &ma.ca_UpdatedAt, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"tasks.Logs", Key:&_String{k}}
	}
}
func (ma *_Logs__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Logs__KeyAssembler)(ma)
}
func (ma *_Logs__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Log.w = &ma.w.Log
		ma.ca_Log.m = &ma.cm
		return &ma.ca_Log
	case 1:
		ma.ca_UpdatedAt.w = &ma.w.UpdatedAt
		ma.ca_UpdatedAt.m = &ma.cm
		return &ma.ca_UpdatedAt
	default:
		panic("unreachable")
	}
}
func (ma *_Logs__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s & fieldBits__Logs_sufficient != fieldBits__Logs_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s & fieldBit__Logs_Log == 0 {
			err.Missing = append(err.Missing, "Log")
		}
		if ma.s & fieldBit__Logs_UpdatedAt == 0 {
			err.Missing = append(err.Missing, "UpdatedAt")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Logs__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Logs__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _Logs__KeyAssembler _Logs__Assembler
func (_Logs__KeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"tasks.Logs.KeyAssembler"}.BeginMap(0)
}
func (_Logs__KeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"tasks.Logs.KeyAssembler"}.BeginList(0)
}
func (na *_Logs__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"tasks.Logs.KeyAssembler"}.AssignNull()
}
func (_Logs__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"tasks.Logs.KeyAssembler"}.AssignBool(false)
}
func (_Logs__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{"tasks.Logs.KeyAssembler"}.AssignInt(0)
}
func (_Logs__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"tasks.Logs.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Logs__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Log":
		if ka.s & fieldBit__Logs_Log != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Logs_Log}
		}
		ka.s += fieldBit__Logs_Log
		ka.state = maState_expectValue
		ka.f = 0
	case "UpdatedAt":
		if ka.s & fieldBit__Logs_UpdatedAt != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Logs_UpdatedAt}
		}
		ka.s += fieldBit__Logs_UpdatedAt
		ka.state = maState_expectValue
		ka.f = 1
	default:
		return ipld.ErrInvalidKey{TypeName:"tasks.Logs", Key:&_String{k}}
	}
	return nil
}
func (_Logs__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"tasks.Logs.KeyAssembler"}.AssignBytes(nil)
}
func (_Logs__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"tasks.Logs.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Logs__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Logs__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (Logs) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Logs) Representation() ipld.Node {
	return (*_Logs__Repr)(n)
}
type _Logs__Repr _Logs
var (
	fieldName__Logs_Log_serial = _String{"Log"}
	fieldName__Logs_UpdatedAt_serial = _String{"UpdatedAt"}
)
var _ ipld.Node = &_Logs__Repr{}
func (_Logs__Repr) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n *_Logs__Repr) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Log":
		return n.Log.Representation(), nil
	case "UpdatedAt":
		return n.UpdatedAt.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n *_Logs__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_Logs__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{"tasks.Logs.Repr"}.LookupByIndex(0)
}
func (n _Logs__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_Logs__Repr) MapIterator() ipld.MapIterator {
	return &_Logs__ReprMapItr{n, 0}
}

type _Logs__ReprMapItr struct {
	n   *_Logs__Repr
	idx int
	
}

func (itr *_Logs__ReprMapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
if itr.idx >= 2 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__Logs_Log_serial
		v = itr.n.Log.Representation()
	case 1:
		k = &fieldName__Logs_UpdatedAt_serial
		v = itr.n.UpdatedAt.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_Logs__ReprMapItr) Done() bool {
	return itr.idx >= 2
}
func (_Logs__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (rn *_Logs__Repr) Length() int64 {
	l := 2
	return int64(l)
}
func (_Logs__Repr) IsAbsent() bool {
	return false
}
func (_Logs__Repr) IsNull() bool {
	return false
}
func (_Logs__Repr) AsBool() (bool, error) {
	return mixins.Map{"tasks.Logs.Repr"}.AsBool()
}
func (_Logs__Repr) AsInt() (int64, error) {
	return mixins.Map{"tasks.Logs.Repr"}.AsInt()
}
func (_Logs__Repr) AsFloat() (float64, error) {
	return mixins.Map{"tasks.Logs.Repr"}.AsFloat()
}
func (_Logs__Repr) AsString() (string, error) {
	return mixins.Map{"tasks.Logs.Repr"}.AsString()
}
func (_Logs__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{"tasks.Logs.Repr"}.AsBytes()
}
func (_Logs__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{"tasks.Logs.Repr"}.AsLink()
}
func (_Logs__Repr) Prototype() ipld.NodePrototype {
	return _Logs__ReprPrototype{}
}
type _Logs__ReprPrototype struct{}

func (_Logs__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _Logs__ReprBuilder
	nb.Reset()
	return &nb
}
type _Logs__ReprBuilder struct {
	_Logs__ReprAssembler
}
func (nb *_Logs__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Logs__ReprBuilder) Reset() {
	var w _Logs
	var m schema.Maybe
	*nb = _Logs__ReprBuilder{_Logs__ReprAssembler{w: &w, m: &m}}
}
type _Logs__ReprAssembler struct {
	w *_Logs
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_Log _String__ReprAssembler
	ca_UpdatedAt _Time__ReprAssembler
	}

func (na *_Logs__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Log.reset()
	na.ca_UpdatedAt.reset()
}
func (na *_Logs__ReprAssembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Logs{}
	}
	return na, nil
}
func (_Logs__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"tasks.Logs.Repr"}.BeginList(0)
}
func (na *_Logs__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"tasks.Logs.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Logs__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{"tasks.Logs.Repr"}.AssignBool(false)
}
func (_Logs__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{"tasks.Logs.Repr"}.AssignInt(0)
}
func (_Logs__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"tasks.Logs.Repr"}.AssignFloat(0)
}
func (_Logs__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{"tasks.Logs.Repr"}.AssignString("")
}
func (_Logs__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"tasks.Logs.Repr"}.AssignBytes(nil)
}
func (_Logs__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"tasks.Logs.Repr"}.AssignLink(nil)
}
func (na *_Logs__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Logs); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "tasks.Logs.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Logs__ReprAssembler) Prototype() ipld.NodePrototype {
	return _Logs__ReprPrototype{}
}
func (ma *_Logs__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_Logs__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Log":
		if ma.s & fieldBit__Logs_Log != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Logs_Log_serial}
		}
		ma.s += fieldBit__Logs_Log
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Log.w = &ma.w.Log
		ma.ca_Log.m = &ma.cm
		return &ma.ca_Log, nil
	case "UpdatedAt":
		if ma.s & fieldBit__Logs_UpdatedAt != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Logs_UpdatedAt_serial}
		}
		ma.s += fieldBit__Logs_UpdatedAt
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_UpdatedAt.w = &ma.w.UpdatedAt
		ma.ca_UpdatedAt.m = &ma.cm
		return &ma.ca_UpdatedAt, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"tasks.Logs.Repr", Key:&_String{k}}
	}
}
func (ma *_Logs__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Logs__ReprKeyAssembler)(ma)
}
func (ma *_Logs__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Log.w = &ma.w.Log
		ma.ca_Log.m = &ma.cm
		return &ma.ca_Log
	case 1:
		ma.ca_UpdatedAt.w = &ma.w.UpdatedAt
		ma.ca_UpdatedAt.m = &ma.cm
		return &ma.ca_UpdatedAt
	default:
		panic("unreachable")
	}
}
func (ma *_Logs__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s & fieldBits__Logs_sufficient != fieldBits__Logs_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s & fieldBit__Logs_Log == 0 {
			err.Missing = append(err.Missing, "Log")
		}
		if ma.s & fieldBit__Logs_UpdatedAt == 0 {
			err.Missing = append(err.Missing, "UpdatedAt")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Logs__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Logs__ReprAssembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}
type _Logs__ReprKeyAssembler _Logs__ReprAssembler
func (_Logs__ReprKeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"tasks.Logs.Repr.KeyAssembler"}.BeginMap(0)
}
func (_Logs__ReprKeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"tasks.Logs.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_Logs__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"tasks.Logs.Repr.KeyAssembler"}.AssignNull()
}
func (_Logs__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"tasks.Logs.Repr.KeyAssembler"}.AssignBool(false)
}
func (_Logs__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{"tasks.Logs.Repr.KeyAssembler"}.AssignInt(0)
}
func (_Logs__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"tasks.Logs.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Logs__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Log":
		if ka.s & fieldBit__Logs_Log != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Logs_Log_serial}
		}
		ka.s += fieldBit__Logs_Log
		ka.state = maState_expectValue
		ka.f = 0
	case "UpdatedAt":
		if ka.s & fieldBit__Logs_UpdatedAt != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Logs_UpdatedAt_serial}
		}
		ka.s += fieldBit__Logs_UpdatedAt
		ka.state = maState_expectValue
		ka.f = 1
	default:
		return ipld.ErrInvalidKey{TypeName:"tasks.Logs.Repr", Key:&_String{k}}
	}
	return nil
}
func (_Logs__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"tasks.Logs.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_Logs__ReprKeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"tasks.Logs.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Logs__ReprKeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Logs__ReprKeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}

func (n *_Map) Lookup(k String) Any {
	v, exists := n.m[*k]
	if !exists {
		return nil
	}
	if v.m == schema.Maybe_Null {
		return nil
	}
	return v.v
}
func (n *_Map) LookupMaybe(k String) MaybeAny {
	v, exists := n.m[*k]
	if !exists {
		return &_Map__valueAbsent
	}
	return v
}

var _Map__valueAbsent = _Any__Maybe{m:schema.Maybe_Absent}
func (n Map) Iterator() *Map__Itr {
	return &Map__Itr{n, 0}
}

type Map__Itr struct {
	n Map
	idx  int
}

func (itr *Map__Itr) Next() (k String, v MaybeAny) {
	if itr.idx >= len(itr.n.t) {
		return nil, nil
	}
	x := &itr.n.t[itr.idx]
	k = &x.k
	v = &x.v
	itr.idx++
	return
}
func (itr *Map__Itr) Done() bool {
	return itr.idx >= len(itr.n.t)
}

type _Map__Maybe struct {
	m schema.Maybe
	v Map
}
type MaybeMap = *_Map__Maybe

func (m MaybeMap) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeMap) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeMap) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeMap) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeMap) Must() Map {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (Map)(&_Map{})
var _ schema.TypedNode = (Map)(&_Map{})
func (Map) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n Map) LookupByString(k string) (ipld.Node, error) {
	var k2 _String
	if err := (_String__Prototype{}).fromString(&k2, k); err != nil {
		return nil, err // TODO wrap in some kind of ErrInvalidKey
	}
	v, exists := n.m[k2]
	if !exists {
		return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(k)}
	}
	if v.m == schema.Maybe_Null {
		return ipld.Null, nil
	}
	return v.v, nil
}
func (n Map) LookupByNode(k ipld.Node) (ipld.Node, error) {
	k2, ok := k.(String)
	if !ok {
		panic("todo invalid key type error")
		// 'ipld.ErrInvalidKey{TypeName:"tasks.Map", Key:&_String{k}}' doesn't quite cut it: need room to explain the type, and it's not guaranteed k can be turned into a string at all
	}
	v, exists := n.m[*k2]
	if !exists {
		return nil, ipld.ErrNotExists{ipld.PathSegmentOfString(k2.String())}
	}
	if v.m == schema.Maybe_Null {
		return ipld.Null, nil
	}
	return v.v, nil
}
func (Map) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{"tasks.Map"}.LookupByIndex(0)
}
func (n Map) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Map) MapIterator() ipld.MapIterator {
	return &_Map__MapItr{n, 0}
}

type _Map__MapItr struct {
	n Map
	idx  int
}

func (itr *_Map__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= len(itr.n.t) {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	x := &itr.n.t[itr.idx]
	k = &x.k
	switch x.v.m {
	case schema.Maybe_Null:
		v = ipld.Null
	case schema.Maybe_Value:
		v = x.v.v
	}
	itr.idx++
	return
}
func (itr *_Map__MapItr) Done() bool {
	return itr.idx >= len(itr.n.t)
}

func (Map) ListIterator() ipld.ListIterator {
	return nil
}
func (n Map) Length() int64 {
	return int64(len(n.t))
}
func (Map) IsAbsent() bool {
	return false
}
func (Map) IsNull() bool {
	return false
}
func (Map) AsBool() (bool, error) {
	return mixins.Map{"tasks.Map"}.AsBool()
}
func (Map) AsInt() (int64, error) {
	return mixins.Map{"tasks.Map"}.AsInt()
}
func (Map) AsFloat() (float64, error) {
	return mixins.Map{"tasks.Map"}.AsFloat()
}
func (Map) AsString() (string, error) {
	return mixins.Map{"tasks.Map"}.AsString()
}
func (Map) AsBytes() ([]byte, error) {
	return mixins.Map{"tasks.Map"}.AsBytes()
}
func (Map) AsLink() (ipld.Link, error) {
	return mixins.Map{"tasks.Map"}.AsLink()
}
func (Map) Prototype() ipld.NodePrototype {
	return _Map__Prototype{}
}
type _Map__Prototype struct{}

func (_Map__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Map__Builder
	nb.Reset()
	return &nb
}
type _Map__Builder struct {
	_Map__Assembler
}
func (nb *_Map__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Map__Builder) Reset() {
	var w _Map
	var m schema.Maybe
	*nb = _Map__Builder{_Map__Assembler{w: &w, m: &m}}
}
type _Map__Assembler struct {
	w *_Map
	m *schema.Maybe
	state maState

	cm schema.Maybe
	ka _String__Assembler
	va _Any__Assembler
}

func (na *_Map__Assembler) reset() {
	na.state = maState_initial
	na.ka.reset()
	na.va.reset()
}
func (na *_Map__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if na.w == nil {
		na.w = &_Map{}
	}
	na.w.m = make(map[_String]MaybeAny, sizeHint)
	na.w.t = make([]_Map__entry, 0, sizeHint)
	return na, nil
}
func (_Map__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"tasks.Map"}.BeginList(0)
}
func (na *_Map__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"tasks.Map"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Map__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"tasks.Map"}.AssignBool(false)
}
func (_Map__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{"tasks.Map"}.AssignInt(0)
}
func (_Map__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"tasks.Map"}.AssignFloat(0)
}
func (_Map__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"tasks.Map"}.AssignString("")
}
func (_Map__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"tasks.Map"}.AssignBytes(nil)
}
func (_Map__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"tasks.Map"}.AssignLink(nil)
}
func (na *_Map__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Map); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "tasks.Map", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Map__Assembler) Prototype() ipld.NodePrototype {
	return _Map__Prototype{}
}
func (ma *_Map__Assembler) keyFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.ka.w = nil
		tz := &ma.w.t[len(ma.w.t)-1]
		ma.cm = schema.Maybe_Absent
		ma.state = maState_expectValue
		ma.w.m[tz.k] = &tz.v
		ma.va.m = &tz.v.m
		tz.v.m = allowNull
		ma.ka.reset()
		return true
	default:
		return false
	}
}
func (ma *_Map__Assembler) valueFinishTidy() bool {
	tz := &ma.w.t[len(ma.w.t)-1]
	switch tz.v.m {
	case schema.Maybe_Null:
		ma.state = maState_initial
		ma.va.reset()
		return true
	case schema.Maybe_Value:
		tz.v.v = ma.va.w
		ma.va.w = nil
		ma.state = maState_initial
		ma.va.reset()
		return true
	default:
		return false
	}
}
func (ma *_Map__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}

	var k2 _String
	if err := (_String__Prototype{}).fromString(&k2, k); err != nil {
		return nil, err // TODO wrap in some kind of ErrInvalidKey
	}
	if _, exists := ma.w.m[k2]; exists {
		return nil, ipld.ErrRepeatedMapKey{&k2}
	}
	ma.w.t = append(ma.w.t, _Map__entry{k: k2})
	tz := &ma.w.t[len(ma.w.t)-1]
	ma.state = maState_midValue

	ma.w.m[k2] = &tz.v
	ma.va.m = &tz.v.m
	tz.v.m = allowNull
	return &ma.va, nil
}
func (ma *_Map__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.w.t = append(ma.w.t, _Map__entry{})
	ma.state = maState_midKey
	ma.ka.m = &ma.cm
	ma.ka.w = &ma.w.t[len(ma.w.t)-1].k
	return &ma.ka
}
func (ma *_Map__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		if !ma.keyFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
		} // if tidy success: carry on
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	return &ma.va
}
func (ma *_Map__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Map__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Map__Assembler) ValuePrototype(_ string) ipld.NodePrototype {
	return _Any__Prototype{}
}
func (Map) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Map) Representation() ipld.Node {
	return (*_Map__Repr)(n)
}
type _Map__Repr _Map
var _ ipld.Node = &_Map__Repr{}
func (_Map__Repr) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (nr *_Map__Repr) LookupByString(k string) (ipld.Node, error) {
	v, err := (Map)(nr).LookupByString(k)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(Any).Representation(), nil
}
func (nr *_Map__Repr) LookupByNode(k ipld.Node) (ipld.Node, error) {
	v, err := (Map)(nr).LookupByNode(k)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(Any).Representation(), nil
}
func (_Map__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{"tasks.Map.Repr"}.LookupByIndex(0)
}
func (n _Map__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (nr *_Map__Repr) MapIterator() ipld.MapIterator {
	return &_Map__ReprMapItr{(Map)(nr), 0}
}

type _Map__ReprMapItr _Map__MapItr

func (itr *_Map__ReprMapItr) Next() (k ipld.Node, v ipld.Node, err error) {
	k, v, err = (*_Map__MapItr)(itr).Next()
	if err != nil || v == ipld.Null {
		return
	}
	return k, v.(Any).Representation(), nil
}
func (itr *_Map__ReprMapItr) Done() bool {
	return (*_Map__MapItr)(itr).Done()
}

func (_Map__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (rn *_Map__Repr) Length() int64 {
	return int64(len(rn.t))
}
func (_Map__Repr) IsAbsent() bool {
	return false
}
func (_Map__Repr) IsNull() bool {
	return false
}
func (_Map__Repr) AsBool() (bool, error) {
	return mixins.Map{"tasks.Map.Repr"}.AsBool()
}
func (_Map__Repr) AsInt() (int64, error) {
	return mixins.Map{"tasks.Map.Repr"}.AsInt()
}
func (_Map__Repr) AsFloat() (float64, error) {
	return mixins.Map{"tasks.Map.Repr"}.AsFloat()
}
func (_Map__Repr) AsString() (string, error) {
	return mixins.Map{"tasks.Map.Repr"}.AsString()
}
func (_Map__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{"tasks.Map.Repr"}.AsBytes()
}
func (_Map__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{"tasks.Map.Repr"}.AsLink()
}
func (_Map__Repr) Prototype() ipld.NodePrototype {
	return _Map__ReprPrototype{}
}
type _Map__ReprPrototype struct{}

func (_Map__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _Map__ReprBuilder
	nb.Reset()
	return &nb
}
type _Map__ReprBuilder struct {
	_Map__ReprAssembler
}
func (nb *_Map__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Map__ReprBuilder) Reset() {
	var w _Map
	var m schema.Maybe
	*nb = _Map__ReprBuilder{_Map__ReprAssembler{w: &w, m: &m}}
}
type _Map__ReprAssembler struct {
	w *_Map
	m *schema.Maybe
	state maState

	cm schema.Maybe
	ka _String__ReprAssembler
	va _Any__ReprAssembler
}

func (na *_Map__ReprAssembler) reset() {
	na.state = maState_initial
	na.ka.reset()
	na.va.reset()
}
func (na *_Map__ReprAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if na.w == nil {
		na.w = &_Map{}
	}
	na.w.m = make(map[_String]MaybeAny, sizeHint)
	na.w.t = make([]_Map__entry, 0, sizeHint)
	return na, nil
}
func (_Map__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"tasks.Map.Repr"}.BeginList(0)
}
func (na *_Map__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"tasks.Map.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Map__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{"tasks.Map.Repr"}.AssignBool(false)
}
func (_Map__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{"tasks.Map.Repr"}.AssignInt(0)
}
func (_Map__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"tasks.Map.Repr"}.AssignFloat(0)
}
func (_Map__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{"tasks.Map.Repr"}.AssignString("")
}
func (_Map__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"tasks.Map.Repr"}.AssignBytes(nil)
}
func (_Map__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"tasks.Map.Repr"}.AssignLink(nil)
}
func (na *_Map__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Map); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "tasks.Map.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Map__ReprAssembler) Prototype() ipld.NodePrototype {
	return _Map__ReprPrototype{}
}
func (ma *_Map__ReprAssembler) keyFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.ka.w = nil
		tz := &ma.w.t[len(ma.w.t)-1]
		ma.cm = schema.Maybe_Absent
		ma.state = maState_expectValue
		ma.w.m[tz.k] = &tz.v
		ma.va.m = &tz.v.m
		tz.v.m = allowNull
		ma.ka.reset()
		return true
	default:
		return false
	}
}
func (ma *_Map__ReprAssembler) valueFinishTidy() bool {
	tz := &ma.w.t[len(ma.w.t)-1]
	switch tz.v.m {
	case schema.Maybe_Null:
		ma.state = maState_initial
		ma.va.reset()
		return true
	case schema.Maybe_Value:
		tz.v.v = ma.va.w
		ma.va.w = nil
		ma.state = maState_initial
		ma.va.reset()
		return true
	default:
		return false
	}
}
func (ma *_Map__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}

	var k2 _String
	if err := (_String__ReprPrototype{}).fromString(&k2, k); err != nil {
		return nil, err // TODO wrap in some kind of ErrInvalidKey
	}
	if _, exists := ma.w.m[k2]; exists {
		return nil, ipld.ErrRepeatedMapKey{&k2}
	}
	ma.w.t = append(ma.w.t, _Map__entry{k: k2})
	tz := &ma.w.t[len(ma.w.t)-1]
	ma.state = maState_midValue

	ma.w.m[k2] = &tz.v
	ma.va.m = &tz.v.m
	tz.v.m = allowNull
	return &ma.va, nil
}
func (ma *_Map__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.w.t = append(ma.w.t, _Map__entry{})
	ma.state = maState_midKey
	ma.ka.m = &ma.cm
	ma.ka.w = &ma.w.t[len(ma.w.t)-1].k
	return &ma.ka
}
func (ma *_Map__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		if !ma.keyFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
		} // if tidy success: carry on
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	return &ma.va
}
func (ma *_Map__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Map__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__ReprPrototype{}
}
func (ma *_Map__ReprAssembler) ValuePrototype(_ string) ipld.NodePrototype {
	return _Any__ReprPrototype{}
}

func (n String) String() string {
	return n.x
}
func (_String__Prototype) fromString(w *_String, v string) error {
	*w = _String{v}
	return nil
}
func (_String__Prototype) FromString(v string) (String, error) {
	n := _String{v}
	return &n, nil
}
type _String__Maybe struct {
	m schema.Maybe
	v String
}
type MaybeString = *_String__Maybe

func (m MaybeString) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeString) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeString) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeString) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeString) Must() String {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (String)(&_String{})
var _ schema.TypedNode = (String)(&_String{})
func (String) Kind() ipld.Kind {
	return ipld.Kind_String
}
func (String) LookupByString(string) (ipld.Node, error) {
	return mixins.String{"tasks.String"}.LookupByString("")
}
func (String) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.String{"tasks.String"}.LookupByNode(nil)
}
func (String) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.String{"tasks.String"}.LookupByIndex(0)
}
func (String) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.String{"tasks.String"}.LookupBySegment(seg)
}
func (String) MapIterator() ipld.MapIterator {
	return nil
}
func (String) ListIterator() ipld.ListIterator {
	return nil
}
func (String) Length() int64 {
	return -1
}
func (String) IsAbsent() bool {
	return false
}
func (String) IsNull() bool {
	return false
}
func (String) AsBool() (bool, error) {
	return mixins.String{"tasks.String"}.AsBool()
}
func (String) AsInt() (int64, error) {
	return mixins.String{"tasks.String"}.AsInt()
}
func (String) AsFloat() (float64, error) {
	return mixins.String{"tasks.String"}.AsFloat()
}
func (n String) AsString() (string, error) {
	return n.x, nil
}
func (String) AsBytes() ([]byte, error) {
	return mixins.String{"tasks.String"}.AsBytes()
}
func (String) AsLink() (ipld.Link, error) {
	return mixins.String{"tasks.String"}.AsLink()
}
func (String) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
type _String__Prototype struct{}

func (_String__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _String__Builder
	nb.Reset()
	return &nb
}
type _String__Builder struct {
	_String__Assembler
}
func (nb *_String__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_String__Builder) Reset() {
	var w _String
	var m schema.Maybe
	*nb = _String__Builder{_String__Assembler{w: &w, m: &m}}
}
type _String__Assembler struct {
	w *_String
	m *schema.Maybe
}

func (na *_String__Assembler) reset() {}
func (_String__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"tasks.String"}.BeginMap(0)
}
func (_String__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"tasks.String"}.BeginList(0)
}
func (na *_String__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.StringAssembler{"tasks.String"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_String__Assembler) AssignBool(bool) error {
	return mixins.StringAssembler{"tasks.String"}.AssignBool(false)
}
func (_String__Assembler) AssignInt(int64) error {
	return mixins.StringAssembler{"tasks.String"}.AssignInt(0)
}
func (_String__Assembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"tasks.String"}.AssignFloat(0)
}
func (na *_String__Assembler) AssignString(v string) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_String{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_String__Assembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"tasks.String"}.AssignBytes(nil)
}
func (_String__Assembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"tasks.String"}.AssignLink(nil)
}
func (na *_String__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_String); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return na.AssignString(v2)
	}
}
func (_String__Assembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (String) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n String) Representation() ipld.Node {
	return (*_String__Repr)(n)
}
type _String__Repr = _String
var _ ipld.Node = &_String__Repr{}
type _String__ReprPrototype = _String__Prototype
type _String__ReprAssembler = _String__Assembler

func (n Time) Int() int64 {
	return n.x
}
func (_Time__Prototype) FromInt(v int64) (Time, error) {
	n := _Time{v}
	return &n, nil
}
type _Time__Maybe struct {
	m schema.Maybe
	v Time
}
type MaybeTime = *_Time__Maybe

func (m MaybeTime) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeTime) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeTime) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeTime) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeTime) Must() Time {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (Time)(&_Time{})
var _ schema.TypedNode = (Time)(&_Time{})
func (Time) Kind() ipld.Kind {
	return ipld.Kind_Int
}
func (Time) LookupByString(string) (ipld.Node, error) {
	return mixins.Int{"tasks.Time"}.LookupByString("")
}
func (Time) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Int{"tasks.Time"}.LookupByNode(nil)
}
func (Time) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Int{"tasks.Time"}.LookupByIndex(0)
}
func (Time) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Int{"tasks.Time"}.LookupBySegment(seg)
}
func (Time) MapIterator() ipld.MapIterator {
	return nil
}
func (Time) ListIterator() ipld.ListIterator {
	return nil
}
func (Time) Length() int64 {
	return -1
}
func (Time) IsAbsent() bool {
	return false
}
func (Time) IsNull() bool {
	return false
}
func (Time) AsBool() (bool, error) {
	return mixins.Int{"tasks.Time"}.AsBool()
}
func (n Time) AsInt() (int64, error) {
	return n.x, nil
}
func (Time) AsFloat() (float64, error) {
	return mixins.Int{"tasks.Time"}.AsFloat()
}
func (Time) AsString() (string, error) {
	return mixins.Int{"tasks.Time"}.AsString()
}
func (Time) AsBytes() ([]byte, error) {
	return mixins.Int{"tasks.Time"}.AsBytes()
}
func (Time) AsLink() (ipld.Link, error) {
	return mixins.Int{"tasks.Time"}.AsLink()
}
func (Time) Prototype() ipld.NodePrototype {
	return _Time__Prototype{}
}
type _Time__Prototype struct{}

func (_Time__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Time__Builder
	nb.Reset()
	return &nb
}
type _Time__Builder struct {
	_Time__Assembler
}
func (nb *_Time__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Time__Builder) Reset() {
	var w _Time
	var m schema.Maybe
	*nb = _Time__Builder{_Time__Assembler{w: &w, m: &m}}
}
type _Time__Assembler struct {
	w *_Time
	m *schema.Maybe
}

func (na *_Time__Assembler) reset() {}
func (_Time__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.IntAssembler{"tasks.Time"}.BeginMap(0)
}
func (_Time__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.IntAssembler{"tasks.Time"}.BeginList(0)
}
func (na *_Time__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.IntAssembler{"tasks.Time"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Time__Assembler) AssignBool(bool) error {
	return mixins.IntAssembler{"tasks.Time"}.AssignBool(false)
}
func (na *_Time__Assembler) AssignInt(v int64) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_Time{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Time__Assembler) AssignFloat(float64) error {
	return mixins.IntAssembler{"tasks.Time"}.AssignFloat(0)
}
func (_Time__Assembler) AssignString(string) error {
	return mixins.IntAssembler{"tasks.Time"}.AssignString("")
}
func (_Time__Assembler) AssignBytes([]byte) error {
	return mixins.IntAssembler{"tasks.Time"}.AssignBytes(nil)
}
func (_Time__Assembler) AssignLink(ipld.Link) error {
	return mixins.IntAssembler{"tasks.Time"}.AssignLink(nil)
}
func (na *_Time__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Time); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsInt(); err != nil {
		return err
	} else {
		return na.AssignInt(v2)
	}
}
func (_Time__Assembler) Prototype() ipld.NodePrototype {
	return _Time__Prototype{}
}
func (Time) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Time) Representation() ipld.Node {
	return (*_Time__Repr)(n)
}
type _Time__Repr = _Time
var _ ipld.Node = &_Time__Repr{}
type _Time__ReprPrototype = _Time__Prototype
type _Time__ReprAssembler = _Time__Assembler

